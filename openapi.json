{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Hallocasa API",
    "description" : "Hallocasa API Documentation",
    "contact" : { },
    "license" : {
      "name" : "Apache 2.0 License",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "v1"
  },
  "tags" : [ {
    "name" : "chat-tickets",
    "description" : "Chat ticket management endpoints"
  }, {
    "name" : "messages",
    "description" : "Notification management endpoints"
  }, {
    "name" : "geo-location",
    "description" : "Operations related to geographical locations"
  }, {
    "name" : "languages",
    "description" : "Operations related to languages"
  }, {
    "name" : "locales",
    "description" : "Operations related to locale management"
  }, {
    "name" : "property-bulk-download",
    "description" : "Operations related to property bulk downloads and exports"
  }, {
    "name" : "property-bulk-uploads",
    "description" : "API for bulk uploading properties in different formats"
  }, {
    "name" : "facebook-properties",
    "description" : "Operations related to Facebook Marketplace property exports"
  }, {
    "name" : "groups",
    "description" : "Operations related to property groups"
  }, {
    "name" : "Property Filters",
    "description" : "API for managing property filters"
  }, {
    "name" : "property types",
    "description" : "Operations for managing property types"
  }, {
    "name" : "Password Recovery",
    "description" : "API endpoints for password recovery process"
  }, {
    "name" : "security",
    "description" : "Endpoints for authentication and authorization"
  }, {
    "name" : "alerts",
    "description" : "Operations related to user alerts and notifications"
  }, {
    "name" : "brokerages",
    "description" : "Brokerage management APIs"
  }, {
    "name" : "endorsements",
    "description" : "User endorsements management API"
  }, {
    "name" : "favorites",
    "description" : "API to manage user favorites"
  }, {
    "name" : "users",
    "description" : "User group search operations"
  }, {
    "name" : "skills",
    "description" : "Operations related to user skills"
  } ],
  "paths" : {
    "/chat/attachments" : {
      "post" : {
        "tags" : [ "attachments" ],
        "summary" : "Post a attachment request",
        "operationId" : "createAttachment_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Attachment"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attachment"
                }
              }
            }
          }
        }
      }
    },
    "/chat/attachments/{fileId}" : {
      "get" : {
        "tags" : [ "attachments" ],
        "summary" : "Get details to download a file",
        "operationId" : "retrieveAttachment_1",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attachment"
                }
              }
            }
          }
        }
      }
    },
    "/chat/attachments/{fileId}/notify-upload" : {
      "post" : {
        "tags" : [ "attachments" ],
        "summary" : "Notify a new file has been loaded in S3",
        "operationId" : "updateAttachment_1",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotifyUploadRequest"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/chat/allowance/{userPair}" : {
      "get" : {
        "tags" : [ "allowances" ],
        "summary" : "Get chat allowance for a user pair",
        "description" : "Retrieves the chat allowance settings between two users. User must be one of the involved parties.",
        "operationId" : "getChatAllowance_1",
        "parameters" : [ {
          "name" : "userPair",
          "in" : "path",
          "description" : "User pair in the form userFrom-userTo",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "user-id-user-id",
            "example" : "123-456"
          },
          "examples" : {
            "User pair example" : {
              "summary" : "Format is userFromId-userToId",
              "description" : "User pair example",
              "value" : "123-456"
            }
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "403" : {
            "description" : "If user is trying to access other users' chat allowances"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Chat allowance retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatAllowance"
                },
                "examples" : {
                  "Allowed conversation" : {
                    "summary" : "Users can exchange messages",
                    "description" : "Allowed conversation",
                    "value" : {
                      "userFrom" : {
                        "id" : 123,
                        "firstName" : "John",
                        "lastName" : "Doe",
                        "email" : "john@example.com",
                        "imageLink" : "https://example.com/profiles/john.jpg",
                        "userStatus" : "ACTIVE"
                      },
                      "userTo" : {
                        "id" : 456,
                        "firstName" : "Jane",
                        "lastName" : "Smith",
                        "email" : "jane@example.com",
                        "imageLink" : "https://example.com/profiles/jane.jpg",
                        "userStatus" : "ACTIVE"
                      },
                      "currentDateTime" : "2023-08-15T10:30:00Z",
                      "chatAllowanceType" : "ACCEPTED"
                    }
                  },
                  "Blocked conversation" : {
                    "summary" : "Users cannot exchange messages",
                    "description" : "Blocked conversation",
                    "value" : {
                      "userFrom" : {
                        "id" : 123,
                        "firstName" : "John",
                        "lastName" : "Doe",
                        "email" : "john@example.com",
                        "imageLink" : "https://example.com/profiles/john.jpg",
                        "userStatus" : "ACTIVE"
                      },
                      "userTo" : {
                        "id" : 456,
                        "firstName" : "Jane",
                        "lastName" : "Smith",
                        "email" : "jane@example.com",
                        "imageLink" : "https://example.com/profiles/jane.jpg",
                        "userStatus" : "ACTIVE"
                      },
                      "currentDateTime" : "2023-08-15T10:30:00Z",
                      "chatAllowanceType" : "BLOCKED"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "allowances" ],
        "summary" : "Update chat allowance for a user pair",
        "description" : "Updates the chat allowance settings between two users",
        "operationId" : "updateChatAllowance_1",
        "parameters" : [ {
          "name" : "userPair",
          "in" : "path",
          "description" : "User pair in the form userFrom-userTo",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "user-id-user-id",
            "example" : "123-456"
          },
          "examples" : {
            "User pair example" : {
              "summary" : "Format is userFromId-userToId",
              "description" : "User pair example",
              "value" : "123-456"
            }
          }
        } ],
        "requestBody" : {
          "description" : "Chat allowance information to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatAllowance"
              },
              "examples" : {
                "Allow messages" : {
                  "summary" : "Setting to allow messages",
                  "description" : "Allow messages",
                  "value" : {
                    "userFrom" : {
                      "id" : 123,
                      "firstName" : "John",
                      "lastName" : "Doe",
                      "email" : "john@example.com",
                      "imageLink" : "https://example.com/profiles/john.jpg",
                      "userStatus" : "ACTIVE"
                    },
                    "userTo" : {
                      "id" : 456,
                      "firstName" : "Jane",
                      "lastName" : "Smith",
                      "email" : "jane@example.com",
                      "imageLink" : "https://example.com/profiles/jane.jpg",
                      "userStatus" : "ACTIVE"
                    },
                    "currentDateTime" : "2023-08-15T10:30:00Z",
                    "chatAllowanceType" : "ACCEPTED"
                  }
                },
                "Block messages" : {
                  "summary" : "Setting to block messages",
                  "description" : "Block messages",
                  "value" : {
                    "userFrom" : {
                      "id" : 123,
                      "firstName" : "John",
                      "lastName" : "Doe",
                      "email" : "john@example.com",
                      "imageLink" : "https://example.com/profiles/john.jpg",
                      "userStatus" : "ACTIVE"
                    },
                    "userTo" : {
                      "id" : 456,
                      "firstName" : "Jane",
                      "lastName" : "Smith",
                      "email" : "jane@example.com",
                      "imageLink" : "https://example.com/profiles/jane.jpg",
                      "userStatus" : "ACTIVE"
                    },
                    "currentDateTime" : "2023-08-15T10:30:00Z",
                    "chatAllowanceType" : "BLOCKED"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Chat allowance updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatAllowance"
                },
                "examples" : {
                  "Updated allowance" : {
                    "summary" : "Result of allowance update",
                    "description" : "Updated allowance",
                    "value" : {
                      "userFrom" : {
                        "id" : 123,
                        "firstName" : "John",
                        "lastName" : "Doe",
                        "email" : "john@example.com",
                        "imageLink" : "https://example.com/profiles/john.jpg",
                        "userStatus" : "ACTIVE"
                      },
                      "userTo" : {
                        "id" : 456,
                        "firstName" : "Jane",
                        "lastName" : "Smith",
                        "email" : "jane@example.com",
                        "imageLink" : "https://example.com/profiles/jane.jpg",
                        "userStatus" : "ACTIVE"
                      },
                      "currentDateTime" : "2023-08-15T10:30:00Z",
                      "chatAllowanceType" : "ACCEPTED"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chat/user_summary/{userId}" : {
      "get" : {
        "tags" : [ "user_summary" ],
        "summary" : "Get the user chat summaries",
        "description" : "Retrieves summaries of all chat conversations for a user",
        "operationId" : "getChatSummaryByUser_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User ID to fetch chat summaries for",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 1001
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit the number of chat summaries returned",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 10
        }, {
          "name" : "before_datetime",
          "in" : "query",
          "description" : "Only return chat summaries before this datetime (UTC timestamp)",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTimeQueryString"
          },
          "example" : "2023-08-15T14:30:00Z"
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserChatsSummary"
                },
                "examples" : {
                  "User chat summaries example" : {
                    "description" : "User chat summaries example",
                    "value" : {
                      "user" : {
                        "id" : 1001,
                        "email" : "user@example.com",
                        "firstName" : "John",
                        "lastName" : "Doe",
                        "imageLink" : "https://example.com/profile/1001.jpg",
                        "userStatus" : "ONLINE"
                      },
                      "conversationSummaries" : [ {
                        "user" : {
                          "id" : 1002,
                          "email" : "contact1@example.com",
                          "firstName" : "Jane",
                          "lastName" : "Smith",
                          "imageLink" : "https://example.com/profile/1002.jpg",
                          "userStatus" : "OFFLINE"
                        },
                        "lastMessage" : "When can we meet?",
                        "lastMessageDateTime" : 1630000000000,
                        "newMessagesCount" : 2,
                        "chatAllowanceType" : "ACCEPTED"
                      }, {
                        "user" : {
                          "id" : 1003,
                          "email" : "contact2@example.com",
                          "firstName" : "Bob",
                          "lastName" : "Johnson",
                          "imageLink" : "https://example.com/profile/1003.jpg",
                          "userStatus" : "ONLINE"
                        },
                        "lastMessage" : "Let me know if you're interested",
                        "lastMessageDateTime" : 1629900000000,
                        "newMessagesCount" : 0,
                        "chatAllowanceType" : "PENDING"
                      } ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chat/ticket" : {
      "get" : {
        "tags" : [ "chat-tickets" ],
        "summary" : "Retrieve a chat ticket for the authenticated user",
        "description" : "Creates and returns a chat ticket that can be used to establish a chat connection",
        "operationId" : "retrieveUserTicket_1",
        "parameters" : [ {
          "name" : "user-agent",
          "in" : "header",
          "description" : "User agent string of the client",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Returns the generated chat ticket",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatTicket"
                },
                "examples" : {
                  "Valid Chat Ticket" : {
                    "summary" : "Example of a valid chat ticket",
                    "description" : "Valid Chat Ticket",
                    "value" : {
                      "id" : "123e4567-e89b-12d3-a456-426614174000",
                      "userId" : 1001,
                      "ip" : "192.168.1.100",
                      "creationTime" : 1625097600000,
                      "expirationTime" : 1625184000000,
                      "browser" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chat/users/{userId}/connections" : {
      "get" : {
        "tags" : [ "user connections" ],
        "summary" : "Get a user connections",
        "operationId" : "findUserConnections_2",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Returns a list of user connections",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                },
                "examples" : {
                  "User connections example" : {
                    "summary" : "A list of user connections with their details",
                    "description" : "User connections example",
                    "value" : [ {
                      "id" : 123,
                      "email" : "john.doe@example.com",
                      "firstName" : "John",
                      "lastName" : "Doe",
                      "imageLink" : "https://example.com/images/users/123.jpg",
                      "userStatus" : "ONLINE"
                    }, {
                      "id" : 456,
                      "email" : "jane.smith@example.com",
                      "firstName" : "Jane",
                      "lastName" : "Smith",
                      "imageLink" : "https://example.com/images/users/456.jpg",
                      "userStatus" : "OFFLINE"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contract" : {
      "get" : {
        "tags" : [ "user contracts" ],
        "summary" : "Get a user Contracts",
        "operationId" : "findUserContracts_1",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Returns the user's contracts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Contract"
                  }
                },
                "examples" : {
                  "userContracts" : {
                    "summary" : "Example of user contracts",
                    "description" : "userContracts",
                    "value" : [ {
                      "legalOwner" : {
                        "id" : 1001,
                        "name" : "John Doe",
                        "email" : "john.doe@example.com"
                      },
                      "counterParty" : {
                        "id" : 1002,
                        "name" : "Jane Smith",
                        "email" : "jane.smith@example.com"
                      },
                      "creationDateTime" : "2023-10-15T10:30:00Z",
                      "contractUrl" : "https://hallocasa.com/contracts/abc123.pdf",
                      "ndaUrl" : "https://hallocasa.com/ndas/abc123.pdf",
                      "legalOwnerSigned" : true,
                      "counterPartySigned" : false
                    }, {
                      "legalOwner" : {
                        "id" : 1001,
                        "name" : "John Doe",
                        "email" : "john.doe@example.com"
                      },
                      "counterParty" : {
                        "id" : 1003,
                        "name" : "Robert Johnson",
                        "email" : "robert.johnson@example.com"
                      },
                      "creationDateTime" : "2023-11-20T14:45:00Z",
                      "contractUrl" : "https://hallocasa.com/contracts/def456.pdf",
                      "ndaUrl" : "https://hallocasa.com/ndas/def456.pdf",
                      "legalOwnerSigned" : true,
                      "counterPartySigned" : true
                    } ]
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "user contracts" ],
        "summary" : "Save a user Contract",
        "operationId" : "save_2",
        "requestBody" : {
          "description" : "Contract to save",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Contract"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Returns the saved contract",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Contract"
                },
                "examples" : {
                  "savedContract" : {
                    "summary" : "Example of saved contract",
                    "description" : "savedContract",
                    "value" : {
                      "legalOwner" : {
                        "id" : 1001,
                        "name" : "John Doe",
                        "email" : "john.doe@example.com"
                      },
                      "counterParty" : {
                        "id" : 1004,
                        "name" : "Maria Garcia",
                        "email" : "maria.garcia@example.com"
                      },
                      "creationDateTime" : "2023-12-05T09:15:00Z",
                      "contractUrl" : "https://hallocasa.com/contracts/ghi789.pdf",
                      "ndaUrl" : "https://hallocasa.com/ndas/ghi789.pdf",
                      "legalOwnerSigned" : true,
                      "counterPartySigned" : false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chat/messages" : {
      "get" : {
        "tags" : [ "messages" ],
        "summary" : "Get a message by conversation",
        "operationId" : "getConversation_1",
        "parameters" : [ {
          "name" : "userAId",
          "in" : "query",
          "description" : "User A Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "userBId",
          "in" : "query",
          "description" : "User B Id",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "limit results",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "before_datetime",
          "in" : "query",
          "description" : "return results before date time",
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateTimeQueryString"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Message"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "messages" ],
        "summary" : "Post a message",
        "operationId" : "sendMessage_1",
        "requestBody" : {
          "description" : "message",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Message"
              }
            }
          }
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{type}" : {
      "post" : {
        "tags" : [ "messages" ],
        "summary" : "Get user notifications by type",
        "description" : "Retrieves notifications for a specific user and notification type. Designed for autopilot integration.",
        "operationId" : "getByUserWithResult_1",
        "parameters" : [ {
          "name" : "token",
          "in" : "query",
          "description" : "Authentication token",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "xZKgWREasfv8r3eT98jRYFUTMaScqCfU"
        }, {
          "name" : "type",
          "in" : "path",
          "description" : "Notification type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TO_BROKER__ALERT_CREATED", "TO_USER__WEEKLY_PROPERTIES", "TO_USER__WEEKLY_PAYED_SUBSCRIBERS", "TO_USER__CUSTOMIZED_ALERT", "TO_USER__WEEKLY_GROUP_PROPERTIES", "TO_USER__NEWSLETTER_NEW_SUBSCRIBER", "TO_USER__NEWSLETTER_CONFIRMATION", "TO_USER__NEWSLETTER_LISTING" ]
          },
          "example" : "MESSAGE"
        } ],
        "requestBody" : {
          "description" : "User information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AutopilotUser"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Notification found and returned successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Notification"
                },
                "examples" : {
                  "sample_notification" : {
                    "description" : "sample_notification",
                    "value" : {
                      "id" : "123e4567-e89b-12d3-a456-426614174000",
                      "userId" : "user123",
                      "type" : "MESSAGE",
                      "content" : "You have a new message",
                      "isRead" : false,
                      "timestamp" : "2023-06-15T14:30:00Z"
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No notification found for the user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "There's not notification for the user example@email.com"
              }
            }
          },
          "403" : {
            "description" : "Invalid authentication token or request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "Invalid Autopilot request"
              }
            }
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/chat/user/{id}" : {
      "get" : {
        "tags" : [ "messages" ],
        "summary" : "Retrieve a user chat",
        "operationId" : "retrieveChatUser_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "user id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/chat/user/{id}/status" : {
      "get" : {
        "tags" : [ "messages" ],
        "summary" : "Retrieve a user chat status",
        "operationId" : "retrieveChatUserStatus_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "user id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "enum" : [ "OFFLINE", "ONLINE" ]
                },
                "examples" : {
                  "onlineUser" : {
                    "summary" : "Online user status",
                    "description" : "onlineUser",
                    "value" : "ONLINE"
                  },
                  "offlineUser" : {
                    "summary" : "Offline user status",
                    "description" : "offlineUser",
                    "value" : "OFFLINE"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/country-phone-prefixes" : {
      "get" : {
        "tags" : [ "phone-prefixes" ],
        "summary" : "Returns all country-phone-prefixes list",
        "description" : "Retrieves a list of all available country phone prefixes with their details",
        "operationId" : "get_2",
        "responses" : {
          "200" : {
            "description" : "Ok. Successfully retrieved country phone prefixes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CountryPhonePrefix"
                  }
                },
                "examples" : {
                  "countryPhonePrefixes" : {
                    "summary" : "Sample country phone prefixes",
                    "description" : "countryPhonePrefixes",
                    "value" : [ {
                      "id" : 1,
                      "prefix" : 1,
                      "description" : "United States",
                      "lang" : "en"
                    }, {
                      "id" : 2,
                      "prefix" : 44,
                      "description" : "United Kingdom",
                      "lang" : "en"
                    }, {
                      "id" : 3,
                      "prefix" : 34,
                      "description" : "Spain",
                      "lang" : "en"
                    } ]
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          }
        }
      }
    },
    "/countries" : {
      "get" : {
        "tags" : [ "countries" ],
        "summary" : "Method to find all the countries",
        "operationId" : "getAllCountries_2",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "If couldn't locate the country by the ip"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Country"
                  }
                },
                "examples" : {
                  "Countries List" : {
                    "summary" : "Example list of countries",
                    "description" : "Countries List",
                    "value" : [ {
                      "id" : 1,
                      "code" : "US",
                      "name" : "United States",
                      "lang" : "en",
                      "currency" : {
                        "id" : 1,
                        "abbreviation" : "USD",
                        "name" : "US Dollar",
                        "lang" : "en",
                        "prefix" : "$"
                      },
                      "locale" : "en_US"
                    }, {
                      "id" : 2,
                      "code" : "ES",
                      "name" : "Spain",
                      "lang" : "es",
                      "currency" : {
                        "id" : 2,
                        "abbreviation" : "EUR",
                        "name" : "Euro",
                        "lang" : "es",
                        "prefix" : "€"
                      },
                      "locale" : "es_ES"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/countries/current" : {
      "get" : {
        "tags" : [ "countries" ],
        "summary" : "Method to find a country by the caller IP",
        "operationId" : "getCountryByIp_1",
        "parameters" : [ {
          "name" : "X-Forwarded-For",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "If couldn't locate the country by the ip"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                },
                "examples" : {
                  "United States" : {
                    "summary" : "Example for US",
                    "description" : "United States",
                    "value" : {
                      "id" : 1,
                      "code" : "US",
                      "name" : "United States",
                      "lang" : "en",
                      "currency" : {
                        "id" : 1,
                        "abbreviation" : "USD",
                        "name" : "US Dollar",
                        "lang" : "en",
                        "prefix" : "$"
                      },
                      "locale" : "en_US"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/currencies" : {
      "get" : {
        "tags" : [ "currency management" ],
        "summary" : "Retrieves the list of all exchange available in application",
        "operationId" : "getCurrencies_1",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Currency"
                  }
                },
                "examples" : {
                  "currencies" : {
                    "description" : "currencies",
                    "value" : [ {
                      "id" : 1,
                      "abbreviation" : "USD",
                      "name" : "US Dollar",
                      "lang" : "en",
                      "prefix" : "$"
                    }, {
                      "id" : 2,
                      "abbreviation" : "EUR",
                      "name" : "Euro",
                      "lang" : "en",
                      "prefix" : "€"
                    }, {
                      "id" : 3,
                      "abbreviation" : "GBP",
                      "name" : "British Pound",
                      "lang" : "en",
                      "prefix" : "£"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exchange-rates" : {
      "get" : {
        "tags" : [ "exchange rates" ],
        "summary" : "Method to find all the exchange rates",
        "description" : "Returns a map of currency exchange rates between different currencies",
        "operationId" : "findExchangeRates_1",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "If couldn't locate the exchange rates"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExchangeRateMap"
                },
                "examples" : {
                  "Standard exchange rates" : {
                    "summary" : "Example of exchange rates from USD, EUR, and GBP",
                    "description" : "A map containing exchange rates between major currencies",
                    "value" : {
                      "USD" : {
                        "EUR" : 0.85,
                        "GBP" : 0.74,
                        "CAD" : 1.31
                      },
                      "EUR" : {
                        "USD" : 1.18,
                        "GBP" : 0.87,
                        "CAD" : 1.54
                      },
                      "GBP" : {
                        "USD" : 1.35,
                        "EUR" : 1.15,
                        "CAD" : 1.77
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/geo-locations" : {
      "get" : {
        "tags" : [ "geo-location" ],
        "summary" : "Retrieves geolocation information",
        "description" : "Retrieves geolocation information based on various search criteria including coordinates, address text, or auto-complete suggestions",
        "operationId" : "getGeoLocationsByLatLng_1",
        "parameters" : [ {
          "name" : "latlng",
          "in" : "query",
          "description" : "Comma-separated latitude and longitude coordinates",
          "schema" : {
            "type" : "string"
          },
          "example" : "40.7128,-74.0060"
        }, {
          "name" : "address",
          "in" : "query",
          "description" : "Text representation of an address to geocode",
          "schema" : {
            "type" : "string"
          },
          "example" : "Barcelona, Spain"
        }, {
          "name" : "countryCode",
          "in" : "query",
          "description" : "ISO country code to restrict the address search",
          "schema" : {
            "type" : "string"
          },
          "example" : "ES"
        }, {
          "name" : "autoCompleteText",
          "in" : "query",
          "description" : "Text to use for location auto-completion suggestions",
          "schema" : {
            "type" : "string"
          },
          "example" : "Barc"
        }, {
          "name" : "radius",
          "in" : "query",
          "description" : "Search radius in meters for location suggestions (used with latlng and autoCompleteText)",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 5000
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved geolocation information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GeoPlace"
                },
                "examples" : {
                  "Address lookup by coordinates" : {
                    "summary" : "Example of address lookup by coordinates",
                    "description" : "Returns address details for a given latitude and longitude",
                    "value" : {
                      "geoLocation" : {
                        "latitude" : 40.7128,
                        "longitude" : -74.006
                      },
                      "address" : {
                        "formatted" : "New York, NY, USA",
                        "line1" : "123 Broadway",
                        "line2" : null,
                        "city" : "New York",
                        "country" : {
                          "id" : 1,
                          "code" : "US",
                          "name" : "United States"
                        },
                        "zipCode" : "10007"
                      }
                    }
                  },
                  "Coordinate lookup by address" : {
                    "summary" : "Example of coordinate lookup by address",
                    "description" : "Returns coordinates for a given address text and country code",
                    "value" : [ {
                      "geoLocation" : {
                        "latitude" : 41.3851,
                        "longitude" : 2.1734
                      },
                      "address" : {
                        "formatted" : "Barcelona, Spain",
                        "city" : "Barcelona",
                        "country" : {
                          "id" : 2,
                          "code" : "ES",
                          "name" : "Spain"
                        }
                      }
                    } ]
                  },
                  "Auto-complete suggestions" : {
                    "summary" : "Example of location suggestions by text",
                    "description" : "Returns suggested locations based on a partial text input",
                    "value" : [ {
                      "geoLocation" : {
                        "latitude" : 41.3851,
                        "longitude" : 2.1734
                      },
                      "address" : {
                        "formatted" : "Barcelona, Spain",
                        "city" : "Barcelona",
                        "country" : {
                          "code" : "ES",
                          "name" : "Spain"
                        }
                      }
                    }, {
                      "geoLocation" : {
                        "latitude" : 10.1333,
                        "longitude" : -64.6833
                      },
                      "address" : {
                        "formatted" : "Barcelona, Venezuela",
                        "city" : "Barcelona",
                        "country" : {
                          "code" : "VE",
                          "name" : "Venezuela"
                        }
                      }
                    } ]
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request parameters"
          },
          "401" : {
            "description" : "Unauthorized access"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/languages" : {
      "get" : {
        "tags" : [ "languages" ],
        "summary" : "Get all available languages",
        "description" : "Returns a list of all supported languages in the system",
        "operationId" : "getAllLanguages_1",
        "parameters" : [ {
          "name" : "X-Forwarded-For",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "If no languages could be found"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Successfully retrieved list of languages",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Language"
                  }
                },
                "examples" : {
                  "Supported languages" : {
                    "description" : "Supported languages",
                    "value" : [ {
                      "id" : 1,
                      "name" : "English",
                      "locale" : "en-US"
                    }, {
                      "id" : 2,
                      "name" : "Español",
                      "locale" : "es-ES"
                    }, {
                      "id" : 3,
                      "name" : "Deutsch",
                      "locale" : "de-DE"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locales/{pnemonic}" : {
      "delete" : {
        "tags" : [ "locales" ],
        "summary" : "Delete a locale entry with all translations related",
        "description" : "Removes a locale entry identified by its pnemonic code along with all its translations",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "security-key",
          "in" : "header",
          "schema" : {
            "type" : "string",
            "description" : "Security key for authorization",
            "example" : "abc123xyz456"
          }
        }, {
          "name" : "pnemonic",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The pnemonic code of the locale to delete",
            "example" : "es"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "text/html" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "Delete operation executed succesfully"
              }
            }
          }
        }
      }
    },
    "/locales" : {
      "get" : {
        "tags" : [ "locales" ],
        "summary" : "Returns all language list locale entries",
        "description" : "Retrieves the complete list of available locales in the system",
        "operationId" : "find_3",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LocaleSet"
                  }
                },
                "examples" : {
                  "locales-example" : {
                    "summary" : "Sample locale list",
                    "description" : "locales-example",
                    "value" : [ {
                      "pnemonic" : "es",
                      "name" : "Español",
                      "isDefault" : true,
                      "isActive" : true,
                      "translations" : {
                        "en" : "Spanish",
                        "fr" : "Espagnol"
                      }
                    }, {
                      "pnemonic" : "en",
                      "name" : "English",
                      "isDefault" : false,
                      "isActive" : true,
                      "translations" : {
                        "es" : "Inglés",
                        "fr" : "Anglais"
                      }
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locales/translations" : {
      "get" : {
        "tags" : [ "locales" ],
        "summary" : "Returns locale language list",
        "description" : "Retrieves the locale translations in the specified language",
        "operationId" : "getLanguages_1",
        "parameters" : [ {
          "name" : "lang",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "description" : "The language code to return translations in",
            "example" : "en"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "Map of locale translations with language codes as keys and translated names as values"
                },
                "examples" : {
                  "translations-example" : {
                    "summary" : "Sample translations map",
                    "description" : "translations-example",
                    "value" : {
                      "es" : "Español",
                      "en" : "English",
                      "fr" : "Français",
                      "de" : "Deutsch",
                      "it" : "Italiano"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/text-translations" : {
      "get" : {
        "tags" : [ "text-translations" ],
        "summary" : "Get text translation to a target language",
        "description" : "Translate the provided text to the specified target language",
        "operationId" : "translateText_1",
        "parameters" : [ {
          "name" : "targetLang",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "text",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Translation completed successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TextTranslation"
                },
                "examples" : {
                  "English to Spanish" : {
                    "summary" : "Example of English to Spanish translation",
                    "description" : "English to Spanish",
                    "value" : {
                      "translatedText" : "Hola mundo",
                      "translatedLanguage" : "es",
                      "originalText" : "Hello world"
                    }
                  },
                  "English to French" : {
                    "summary" : "Example of English to French translation",
                    "description" : "English to French",
                    "value" : {
                      "translatedText" : "Bonjour le monde",
                      "translatedLanguage" : "fr",
                      "originalText" : "Hello world"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/property-bulk-download/trigger-kyero-export" : {
      "post" : {
        "tags" : [ "property-bulk-download" ],
        "summary" : "Manually trigger Kyero exports to S3",
        "description" : "Initiates the process to export all property data in Kyero format to S3 storage. Requires admin privileges.",
        "operationId" : "triggerKyeroExport_1",
        "responses" : {
          "202" : {
            "description" : "Export process started successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Kyero export process started\"}"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Admin privileges required",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/property-bulk-download/{userId}/{xmlFormat}.xml" : {
      "get" : {
        "tags" : [ "property-bulk-download" ],
        "summary" : "Get property XML for specific user",
        "description" : "Generates and returns property data in XML format for a specific user and format type.",
        "operationId" : "xml_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User ID for the property owner",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 12345
        }, {
          "name" : "xmlFormat",
          "in" : "path",
          "description" : "XML format type (e.g., kyero, idealista)",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kyero"
        } ],
        "responses" : {
          "200" : {
            "description" : "XML content for the requested properties",
            "content" : {
              "application/xml" : {
                "example" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<properties>\n  <property>\n    <id>12345</id>\n    <title>Beautiful Villa</title>\n    <price>250000</price>\n    <location>Marbella, Spain</location>\n    <!-- Additional property details -->\n  </property>\n  <!-- More properties -->\n</properties>"
              }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid user ID",
            "content" : {
              "application/xml;charset=utf-8" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - Format not supported",
            "content" : {
              "application/xml;charset=utf-8" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/property-bulk-download/{userId}/{xmlFormat}.xml.redirect" : {
      "get" : {
        "tags" : [ "property-bulk-download" ],
        "summary" : "Redirect to XML file (Deprecated)",
        "description" : "Redirects to the XML file stored in S3 for a specific user and format. This endpoint is deprecated.",
        "operationId" : "xmlRedirect_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "User ID for the property owner",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : 12345
        }, {
          "name" : "xmlFormat",
          "in" : "path",
          "description" : "XML format type",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "kyero"
        } ],
        "responses" : {
          "301" : {
            "description" : "Moved Permanently - Redirects to the actual file location"
          },
          "400" : {
            "description" : "Bad Request - Invalid user ID or user not found",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/property-bulk-uploads/formats" : {
      "get" : {
        "tags" : [ "property-bulk-uploads" ],
        "summary" : "Get available formats",
        "description" : "Get the list of supported file formats for bulk upload",
        "operationId" : "getFormats_1",
        "responses" : {
          "200" : {
            "description" : "List of available formats",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/property-bulk-uploads/in-body" : {
      "post" : {
        "tags" : [ "property-bulk-uploads" ],
        "summary" : "Upload Kyero properties with XML in request body",
        "description" : "Upload properties using Kyero format with XML content in the request body",
        "operationId" : "uploadKyeroProperties_2",
        "requestBody" : {
          "description" : "Properties XML content in Kyero format",
          "content" : {
            "application/xml" : {
              "schema" : {
                "type" : "string",
                "example" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <property>\n    <reference>prop123</reference>\n    <price>250000</price>\n    <type>house</type>\n  </property>\n</root>"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Properties accepted for processing",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Authentication required",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Subscription required or insufficient permissions",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/property-bulk-uploads/in-url" : {
      "post" : {
        "tags" : [ "property-bulk-uploads" ],
        "summary" : "Upload Kyero properties from URL",
        "description" : "Upload properties in Kyero format by providing a URL to an XML file",
        "operationId" : "uploadKyeroPropertiesFromUrl_1",
        "requestBody" : {
          "description" : "XML URL object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/XmlUrl"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Properties accepted for processing",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Authentication required",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Subscription required or insufficient permissions",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid URL format",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/property-bulk-uploads/{format}/in-body" : {
      "post" : {
        "tags" : [ "property-bulk-uploads" ],
        "summary" : "Upload properties in specified format with XML in request body",
        "description" : "Upload properties with XML content in the request body using the specified format",
        "operationId" : "uploadProperties_1",
        "parameters" : [ {
          "name" : "format",
          "in" : "path",
          "description" : "Format identifier",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "kyero", "wasico", "xml2u", "hallocasa" ]
          }
        } ],
        "requestBody" : {
          "description" : "Properties XML content",
          "content" : {
            "application/xml" : {
              "schema" : {
                "type" : "string",
                "example" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <property>\n    <reference>prop123</reference>\n    <price>250000</price>\n    <type>house</type>\n  </property>\n</root>"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Properties accepted for processing",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Authentication required",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Subscription required or insufficient permissions",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "Format not supported",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/property-bulk-uploads/{format}/in-url" : {
      "post" : {
        "tags" : [ "property-bulk-uploads" ],
        "summary" : "Upload properties in specified format from URL",
        "description" : "Upload properties in the specified format by providing a URL to an XML file",
        "operationId" : "uploadPropertiesFromUrl_1",
        "parameters" : [ {
          "name" : "format",
          "in" : "path",
          "description" : "Format identifier",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "kyero", "wasico", "xml2u", "hallocasa" ]
          }
        } ],
        "requestBody" : {
          "description" : "XML URL object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/XmlUrl"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Properties accepted for processing",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized - Authentication required",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "Forbidden - Subscription required or insufficient permissions",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "Format not supported",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "Bad Request - Invalid URL format",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/facebook-properties" : {
      "get" : {
        "tags" : [ "facebook-properties" ],
        "summary" : "Export properties to Facebook Marketplace",
        "description" : "Exports property data to Facebook Marketplace format within the specified date range",
        "operationId" : "uploadKyeroProperties",
        "parameters" : [ {
          "name" : "start-date",
          "in" : "query",
          "description" : "Start date for property export (ISO format)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2023-01-01"
        }, {
          "name" : "end-date",
          "in" : "query",
          "description" : "End date for property export (ISO format)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2023-12-31"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful export of properties",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FBPropertyDto"
                  }
                },
                "examples" : {
                  "Property List Example" : {
                    "summary" : "Sample list of property data for Facebook Marketplace",
                    "description" : "Property List Example",
                    "value" : [ {
                      "id" : "12345",
                      "url" : "https://hallocasa.com/property/12345",
                      "title" : "Luxury Villa with Ocean View",
                      "description" : "Beautiful luxury villa with panoramic ocean views",
                      "availability" : "FOR_SALE",
                      "propertyType" : "HOUSE",
                      "listingType" : "RESALE",
                      "numBedrooms" : 4,
                      "numBathrooms" : 3,
                      "price" : 850000,
                      "currency" : "EUR",
                      "images" : [ "https://hallocasa.com/images/property/12345/main.jpg", "https://hallocasa.com/images/property/12345/kitchen.jpg" ],
                      "address" : {
                        "street" : "Calle del Mar 123",
                        "city" : "Marbella",
                        "region" : "Andalucía",
                        "postalCode" : "29600",
                        "country" : "ES"
                      },
                      "latitude" : 36.5092,
                      "longitude" : -4.8832,
                      "yearBuilt" : 2018,
                      "squareMeters" : 320,
                      "features" : [ "pool", "garden", "garage", "security" ]
                    }, {
                      "id" : "67890",
                      "url" : "https://hallocasa.com/property/67890",
                      "title" : "Modern City Apartment",
                      "description" : "Stylish apartment in the city center",
                      "availability" : "FOR_RENT",
                      "propertyType" : "APARTMENT",
                      "listingType" : "RENTAL",
                      "numBedrooms" : 2,
                      "numBathrooms" : 1,
                      "price" : 1200,
                      "currency" : "EUR",
                      "images" : [ "https://hallocasa.com/images/property/67890/main.jpg", "https://hallocasa.com/images/property/67890/living.jpg" ],
                      "address" : {
                        "street" : "Calle Mayor 45",
                        "city" : "Madrid",
                        "region" : "Madrid",
                        "postalCode" : "28001",
                        "country" : "ES"
                      },
                      "latitude" : 40.4167,
                      "longitude" : -3.7033,
                      "yearBuilt" : 2015,
                      "squareMeters" : 85,
                      "features" : [ "furnished", "air_conditioning", "elevator" ]
                    } ]
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid date format",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorized access",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/groups/{groupId}/members" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Show all members of Group",
        "description" : "For Group Owners, this list will return removed, left, invited and requested members as well",
        "operationId" : "getGroupMembers_1",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "group id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pageFrom",
          "in" : "query",
          "description" : "Starting page index (zero-based)",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "pageTo",
          "in" : "query",
          "description" : "Ending page index (zero-based)",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 9
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BaseFilterResult"
                },
                "examples" : {
                  "groupMembers" : {
                    "description" : "groupMembers",
                    "value" : {
                      "totalCount" : 10,
                      "pageFrom" : 0,
                      "pageTo" : 9,
                      "hasMore" : true,
                      "items" : [ {
                        "id" : "1",
                        "userId" : 123,
                        "groupId" : "group-123",
                        "status" : "ACCEPTED",
                        "createdDate" : "2023-05-15T10:30:00Z",
                        "lastModifiedDate" : "2023-05-15T10:30:00Z",
                        "userFullName" : "John Doe",
                        "userEmail" : "john.doe@example.com",
                        "userPhotoUrl" : "https://example.com/photos/john_doe.jpg"
                      }, {
                        "id" : "2",
                        "userId" : 456,
                        "groupId" : "group-123",
                        "status" : "INVITED",
                        "createdDate" : "2023-05-16T14:15:00Z",
                        "lastModifiedDate" : "2023-05-16T14:15:00Z",
                        "userFullName" : "Jane Smith",
                        "userEmail" : "jane.smith@example.com",
                        "userPhotoUrl" : "https://example.com/photos/jane_smith.jpg"
                      } ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/accept-invite" : {
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Accept Group Invitation",
        "operationId" : "groupInvite_2",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "group id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupMember"
                },
                "examples" : {
                  "acceptedInvite" : {
                    "description" : "acceptedInvite",
                    "value" : {
                      "id" : "6",
                      "userId" : 103,
                      "groupId" : "group-123",
                      "status" : "ACCEPTED",
                      "createdDate" : "2023-05-19T11:30:00Z",
                      "lastModifiedDate" : "2023-05-19T14:25:00Z",
                      "userFullName" : "Emily Wilson",
                      "userEmail" : "emily.wilson@example.com",
                      "userPhotoUrl" : "https://example.com/photos/emily_wilson.jpg"
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Group not found or invitation not found",
            "content" : {
              "application/json" : {
                "example" : "Group Member OR Group not found"
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/invite" : {
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Request Invitation to Group",
        "operationId" : "groupInvite",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "group id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userIds",
          "in" : "query",
          "description" : "List of user IDs to invite",
          "schema" : {
            "type" : "array",
            "example" : [ 101, 102 ],
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GroupMember"
                  }
                },
                "examples" : {
                  "groupMembers" : {
                    "description" : "groupMembers",
                    "value" : [ {
                      "id" : "4",
                      "userId" : 101,
                      "groupId" : "group-123",
                      "status" : "INVITED",
                      "createdDate" : "2023-05-18T15:20:00Z",
                      "lastModifiedDate" : "2023-05-18T15:20:00Z",
                      "userFullName" : "Sarah Miller",
                      "userEmail" : "sarah.miller@example.com",
                      "userPhotoUrl" : "https://example.com/photos/sarah_miller.jpg"
                    }, {
                      "id" : "5",
                      "userId" : 102,
                      "groupId" : "group-123",
                      "status" : "INVITED",
                      "createdDate" : "2023-05-18T15:20:00Z",
                      "lastModifiedDate" : "2023-05-18T15:20:00Z",
                      "userFullName" : "Michael Brown",
                      "userEmail" : "michael.brown@example.com",
                      "userPhotoUrl" : "https://example.com/photos/michael_brown.jpg"
                    } ]
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Group not found",
            "content" : {
              "application/json" : {
                "example" : "Group Member OR Group not found"
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/leave" : {
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Leave Group",
        "operationId" : "groupLeave_1",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "group id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupMember"
                },
                "examples" : {
                  "leftGroup" : {
                    "description" : "leftGroup",
                    "value" : {
                      "id" : "7",
                      "userId" : 104,
                      "groupId" : "group-123",
                      "status" : "LEFT",
                      "createdDate" : "2023-05-20T08:15:00Z",
                      "lastModifiedDate" : "2023-05-25T17:40:00Z",
                      "userFullName" : "David Clark",
                      "userEmail" : "david.clark@example.com",
                      "userPhotoUrl" : "https://example.com/photos/david_clark.jpg"
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Group not found or user not a member",
            "content" : {
              "application/json" : {
                "example" : "Group Member OR Group not found"
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/request" : {
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Request Admission to Group",
        "operationId" : "groupRequest_1",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "group id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GroupMember"
                },
                "examples" : {
                  "groupMember" : {
                    "description" : "groupMember",
                    "value" : {
                      "id" : "3",
                      "userId" : 789,
                      "groupId" : "group-123",
                      "status" : "REQUESTED",
                      "createdDate" : "2023-05-17T09:45:00Z",
                      "lastModifiedDate" : "2023-05-17T09:45:00Z",
                      "userFullName" : "Robert Johnson",
                      "userEmail" : "robert.johnson@example.com",
                      "userPhotoUrl" : "https://example.com/photos/robert_johnson.jpg"
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Group not found",
            "content" : {
              "application/json" : {
                "example" : "Group Member OR Group not found"
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/member-status" : {
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Update the group member status from groupId supplied",
        "description" : "Acceptable Status values are:  ACCEPTED, REJECTED, REMOVED",
        "operationId" : "updateGroupMembershipStatus_1",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userIds",
          "in" : "query",
          "description" : "List of user IDs to update status",
          "schema" : {
            "type" : "array",
            "example" : [ 105, 106 ],
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "New status for the members",
          "schema" : {
            "type" : "string",
            "example" : "ACCEPTED",
            "enum" : [ "ACCEPTED", "REJECTED", "REMOVED" ]
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GroupMember"
                  }
                },
                "examples" : {
                  "updatedMembers" : {
                    "description" : "updatedMembers",
                    "value" : [ {
                      "id" : "8",
                      "userId" : 105,
                      "groupId" : "group-123",
                      "status" : "ACCEPTED",
                      "createdDate" : "2023-05-21T13:45:00Z",
                      "lastModifiedDate" : "2023-05-21T14:30:00Z",
                      "userFullName" : "Amanda Jones",
                      "userEmail" : "amanda.jones@example.com",
                      "userPhotoUrl" : "https://example.com/photos/amanda_jones.jpg"
                    }, {
                      "id" : "9",
                      "userId" : 106,
                      "groupId" : "group-123",
                      "status" : "ACCEPTED",
                      "createdDate" : "2023-05-21T13:50:00Z",
                      "lastModifiedDate" : "2023-05-21T14:35:00Z",
                      "userFullName" : "Thomas Anderson",
                      "userEmail" : "thomas.anderson@example.com",
                      "userPhotoUrl" : "https://example.com/photos/thomas_anderson.jpg"
                    } ]
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Group not found or users not members",
            "content" : {
              "application/json" : {
                "example" : "Group Member OR Group not found"
              }
            }
          }
        }
      }
    },
    "/groups/{id}/archive" : {
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Archive the group with id supplied",
        "description" : "This process is reversible",
        "operationId" : "archiveGroup_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "group123"
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "text/html" : {
                "schema" : {
                  "type" : "string"
                },
                "examples" : {
                  "Success response" : {
                    "description" : "Success response",
                    "value" : "Group archived successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{id}/deactivate" : {
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Deactivate the group with id supplied",
        "description" : "This process is reversible",
        "operationId" : "deactivateGroup_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "group123"
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "text/html" : {
                "schema" : {
                  "type" : "string"
                },
                "examples" : {
                  "Success response" : {
                    "description" : "Success response",
                    "value" : "Group deactivated successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{id}" : {
      "delete" : {
        "tags" : [ "groups" ],
        "summary" : "Delete the group with id supplied",
        "description" : "This process is not reversible",
        "operationId" : "deleteGroup_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "groupId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "group123"
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "text/html" : {
                "examples" : {
                  "Success response" : {
                    "description" : "Success response",
                    "value" : "Group deleted successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/archived" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Return the groups list with specified user id that user has archived",
        "operationId" : "findArchivedGroupsByUser_1",
        "parameters" : [ {
          "name" : "pageFrom",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageTo",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BaseFilterResult"
                },
                "examples" : {
                  "Archived groups" : {
                    "description" : "Archived groups",
                    "value" : {
                      "results" : [ {
                        "id" : "group321",
                        "name" : "Historic Properties",
                        "description" : "A collection of historic properties",
                        "owner" : {
                          "id" : 1001,
                          "name" : "John Doe"
                        },
                        "archived" : true,
                        "active" : false,
                        "createdDate" : "2023-01-05T11:20:00Z"
                      } ],
                      "total" : 1,
                      "from" : 0,
                      "to" : 10
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "UserId is invalid"
          },
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/groups/{groupId}" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Return the group with specified id",
        "description" : "Filter the groups existing in system with specified id. Returns empty if none group match the id and user is not member/owner of it",
        "operationId" : "findGroup_1",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "group id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "group123"
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "404" : {
            "description" : "Group not found"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                },
                "examples" : {
                  "Group details" : {
                    "description" : "Group details",
                    "value" : {
                      "id" : "group123",
                      "name" : "Luxury Properties",
                      "description" : "A collection of luxury properties",
                      "owner" : {
                        "id" : 1001,
                        "name" : "John Doe"
                      },
                      "members" : [ {
                        "id" : 1002,
                        "name" : "Jane Smith"
                      } ],
                      "active" : true,
                      "createdDate" : "2023-01-15T10:30:00Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/properties" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Return the group with specified id",
        "description" : "Filter the groups existing in system with specified id. Returns empty if none group match the id and user is not member/owner of it",
        "operationId" : "findGroupProperties_1",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "group id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "group123"
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Property"
                  }
                },
                "examples" : {
                  "List of properties in a group" : {
                    "description" : "List of properties in a group",
                    "value" : [ {
                      "id" : "prop123",
                      "title" : "Luxury Villa",
                      "price" : 500000,
                      "currency" : "USD",
                      "bedrooms" : 4,
                      "bathrooms" : 3,
                      "area" : 250,
                      "areaUnit" : "m2"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/properties/search" : {
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Return the group with specified id",
        "description" : "Filter the groups existing in system with specified id. Returns empty if none group match the id and user is not member/owner of it",
        "operationId" : "findGroupPropertiesSearch_1",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "group id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "group123"
        } ],
        "requestBody" : {
          "description" : "filters",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PropertyFilterCriteria"
              }
            }
          }
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BaseFilterResult"
                },
                "examples" : {
                  "Filtered property results" : {
                    "description" : "Filtered property results",
                    "value" : {
                      "results" : [ {
                        "id" : "prop123",
                        "title" : "Luxury Villa",
                        "price" : 500000,
                        "currency" : "USD",
                        "bedrooms" : 4,
                        "bathrooms" : 3,
                        "area" : 250,
                        "areaUnit" : "m2"
                      } ],
                      "total" : 1,
                      "from" : 0,
                      "to" : 10
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Return the groups list with specified user id",
        "description" : "This will return both owned Groups and Groups the user is a member of",
        "operationId" : "findGroupsByUser_1",
        "parameters" : [ {
          "name" : "pageFrom",
          "in" : "query",
          "description" : "Start page number",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 0
        }, {
          "name" : "pageTo",
          "in" : "query",
          "description" : "End page number",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 10
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BaseFilterResult"
                },
                "examples" : {
                  "User's groups" : {
                    "description" : "User's groups",
                    "value" : {
                      "results" : [ {
                        "id" : "group123",
                        "name" : "Luxury Properties",
                        "description" : "A collection of luxury properties",
                        "owner" : {
                          "id" : 1001,
                          "name" : "John Doe"
                        },
                        "members" : [ {
                          "id" : 1002,
                          "name" : "Jane Smith"
                        } ],
                        "active" : true,
                        "createdDate" : "2023-01-15T10:30:00Z"
                      } ],
                      "total" : 1,
                      "from" : 0,
                      "to" : 10
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "UserId is invalid"
          },
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Create or update the group supplied",
        "description" : "Consider that only user can saveNew its groups",
        "operationId" : "saveGroup_1",
        "requestBody" : {
          "description" : "group to persist",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Group"
              }
            }
          }
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                },
                "examples" : {
                  "Created/Updated group" : {
                    "description" : "Created/Updated group",
                    "value" : {
                      "id" : "group987",
                      "name" : "Mountain Properties",
                      "description" : "A collection of mountain properties",
                      "owner" : {
                        "id" : 1001,
                        "name" : "John Doe"
                      },
                      "members" : [ ],
                      "active" : true,
                      "createdDate" : "2023-05-18T08:25:00Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/inactive" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Return the groups list with specified user id that are inactive",
        "operationId" : "findInactiveGroupsByUser_1",
        "parameters" : [ {
          "name" : "pageFrom",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageTo",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BaseFilterResult"
                },
                "examples" : {
                  "Inactive groups" : {
                    "description" : "Inactive groups",
                    "value" : {
                      "results" : [ {
                        "id" : "group654",
                        "name" : "Vacation Rentals",
                        "description" : "A collection of vacation rental properties",
                        "owner" : {
                          "id" : 1001,
                          "name" : "John Doe"
                        },
                        "active" : false,
                        "createdDate" : "2023-04-25T16:40:00Z"
                      } ],
                      "total" : 1,
                      "from" : 0,
                      "to" : 10
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "UserId is invalid"
          },
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/groups/invited" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Return the groups list with specified user id that user has invitations of",
        "operationId" : "findInvitedGroupsByUser_1",
        "parameters" : [ {
          "name" : "pageFrom",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageTo",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BaseFilterResult"
                },
                "examples" : {
                  "Invited groups" : {
                    "description" : "Invited groups",
                    "value" : {
                      "results" : [ {
                        "id" : "group789",
                        "name" : "Waterfront Properties",
                        "description" : "A collection of waterfront properties",
                        "owner" : {
                          "id" : 1004,
                          "name" : "Bob Smith"
                        },
                        "active" : true,
                        "createdDate" : "2023-03-10T09:45:00Z"
                      } ],
                      "total" : 1,
                      "from" : 0,
                      "to" : 10
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "UserId is invalid"
          },
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/groups/requested" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Return the groups list with specified user id that user has requested",
        "operationId" : "findRequestedGroupsByUser_1",
        "parameters" : [ {
          "name" : "pageFrom",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageTo",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BaseFilterResult"
                },
                "examples" : {
                  "Requested groups" : {
                    "description" : "Requested groups",
                    "value" : {
                      "results" : [ {
                        "id" : "group456",
                        "name" : "Premium Properties",
                        "description" : "A collection of premium properties",
                        "owner" : {
                          "id" : 1003,
                          "name" : "Alice Johnson"
                        },
                        "active" : true,
                        "createdDate" : "2023-02-20T14:15:00Z"
                      } ],
                      "total" : 1,
                      "from" : 0,
                      "to" : 10
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "UserId is invalid"
          },
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/property-fields/filter-by-key" : {
      "post" : {
        "tags" : [ "Property Field" ],
        "summary" : "Retrieves property fields filtered by key",
        "description" : "Retrieves the list of property fields that will be showed when selecting the type, proposal, location, and country specified. All the property keys are required, otherwise system generate a bad request, because without all the parameters, it is not posible filter the property fields",
        "operationId" : "getPropertyFilters_2",
        "requestBody" : {
          "description" : "key set of the property to filter",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PropertyKey"
              }
            }
          }
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/property_filters/options/{filter_id}" : {
      "post" : {
        "tags" : [ "Property Filters" ],
        "summary" : "Get property field options",
        "description" : "Retrieves options for a specific property filter based on submitted filters",
        "operationId" : "getPropertyFieldOptions_1",
        "parameters" : [ {
          "name" : "filter_id",
          "in" : "path",
          "description" : "ID of the filter to get options for",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        } ],
        "requestBody" : {
          "description" : "List of property filter submissions",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PropertyFilterSubmission"
                }
              },
              "examples" : {
                "FilterSubmissionExample" : {
                  "description" : "FilterSubmissionExample",
                  "value" : [ {
                    "apply" : true,
                    "propertyFilter" : {
                      "filter" : {
                        "id" : 2,
                        "name" : "Location"
                      },
                      "propertyField" : {
                        "id" : 10,
                        "name" : "Location"
                      }
                    },
                    "minValue" : null,
                    "maxValue" : null,
                    "latitudeValue" : 40.7128,
                    "longitudeValue" : -74.006,
                    "radiusValue" : 10,
                    "selectedFilterOptions" : [ ]
                  } ]
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                },
                "examples" : {
                  "FilterOptionsExample" : {
                    "description" : "FilterOptionsExample",
                    "value" : {
                      "options" : [ {
                        "id" : 1,
                        "value" : "Apartment",
                        "lang" : "en",
                        "selected" : false
                      }, {
                        "id" : 2,
                        "value" : "House",
                        "lang" : "en",
                        "selected" : false
                      }, {
                        "id" : 3,
                        "value" : "Villa",
                        "lang" : "en",
                        "selected" : false
                      } ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/property_filters" : {
      "get" : {
        "tags" : [ "Property Filters" ],
        "summary" : "Get property filters",
        "description" : "Retrieves a list of property filters, optionally filtered by filter nature IDs",
        "operationId" : "getPropertyFilters",
        "parameters" : [ {
          "name" : "filter_nature_id",
          "in" : "query",
          "description" : "Filter nature IDs to filter by",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "example" : "1,2,3"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PropertyFilter"
                  }
                },
                "examples" : {
                  "PropertyFilterExample" : {
                    "description" : "PropertyFilterExample",
                    "value" : [ {
                      "filter" : {
                        "id" : 1,
                        "name" : "Price",
                        "lang" : "en",
                        "filterType" : {
                          "id" : 2,
                          "name" : "Range"
                        },
                        "filterNature" : {
                          "id" : 1,
                          "name" : "Monetary"
                        },
                        "showingStepList" : [ {
                          "stepId" : 1,
                          "filterShown" : true
                        } ],
                        "usePropertyField" : true
                      },
                      "propertyField" : {
                        "id" : 5,
                        "name" : "Price",
                        "lang" : "en",
                        "basic" : true,
                        "primaryKey" : false,
                        "multilanguageValue" : false,
                        "propertyFieldType" : {
                          "id" : 1,
                          "name" : "Monetary"
                        },
                        "propertyFieldValueType" : {
                          "id" : 3,
                          "name" : "Currency Amount"
                        },
                        "fieldValueList" : [ ]
                      }
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/property-locations" : {
      "get" : {
        "tags" : [ "property locations" ],
        "summary" : "Method to find all the property locations",
        "description" : "Retrieves a list of all available property locations",
        "operationId" : "getAllCountries",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Successfully retrieved property locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PropertyLocation"
                  }
                },
                "examples" : {
                  "PropertyLocations" : {
                    "summary" : "Sample property locations",
                    "description" : "A list of property locations with different languages",
                    "value" : [ {
                      "id" : 1,
                      "name" : "Suburb",
                      "lang" : "en"
                    }, {
                      "id" : 2,
                      "name" : "Barrio",
                      "lang" : "es"
                    }, {
                      "id" : 3,
                      "name" : "Quartier",
                      "lang" : "fr"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/property-proposals" : {
      "get" : {
        "tags" : [ "property proposals" ],
        "summary" : "Method to find all the property proposals",
        "operationId" : "getAllPropertyProposals_1",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PropertyProposal"
                  }
                },
                "examples" : {
                  "propertyProposals" : {
                    "summary" : "List of property proposals",
                    "description" : "A sample list containing property proposals",
                    "value" : [ {
                      "id" : 1,
                      "name" : "Apartment for rent",
                      "lang" : "en"
                    }, {
                      "id" : 2,
                      "name" : "Apartamento para alquilar",
                      "lang" : "es"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties/{propertyId}/publication-state" : {
      "post" : {
        "tags" : [ "properties" ],
        "summary" : "Publication state update",
        "operationId" : "changePublicationStatus_2",
        "parameters" : [ {
          "name" : "propertyId",
          "in" : "path",
          "description" : "Property ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "prop123456"
        } ],
        "requestBody" : {
          "description" : "Publication state to set",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "enum" : [ "DRAFT", "PASSWORD_PROTECTED", "PUBLISHED" ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "403" : {
            "description" : "If user doesn't have permission"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK. Property with updated publication state",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Property"
                },
                "examples" : {
                  "publishedProperty" : {
                    "summary" : "Property with updated publication state",
                    "description" : "A sample property response after updating publication state",
                    "value" : {
                      "id" : "prop123456",
                      "title" : "Beautiful Beach House",
                      "price" : 450000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Cartagena",
                        "latitude" : 10.391049,
                        "longitude" : -75.479426
                      },
                      "propertyType" : "HOUSE",
                      "transactionType" : "SALE",
                      "bathrooms" : 3,
                      "bedrooms" : 4,
                      "area" : 250,
                      "publicationState" : "PUBLISHED"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties/{id}" : {
      "delete" : {
        "tags" : [ "properties" ],
        "summary" : "Delete the property with id supplied",
        "description" : "This process is not reversible",
        "operationId" : "deleteProperty_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Property ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "prop123456"
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "403" : {
            "description" : "If user doesn't have permission to delete this property"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK. Property deleted successfully",
            "content" : {
              "text/html" : {
                "schema" : {
                  "type" : "string",
                  "description" : "Success message"
                },
                "examples" : {
                  "deleteSuccess" : {
                    "summary" : "Successful deletion",
                    "description" : "A success message after deleting a property",
                    "value" : "Property deleted successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties/fetch-random" : {
      "get" : {
        "tags" : [ "properties" ],
        "summary" : "Fetch random list of properties, with basic data",
        "description" : "Returns a randomized list of properties with the specified count limit",
        "operationId" : "fetchRandomProperties_2",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK. List of random properties",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Property"
                  }
                },
                "examples" : {
                  "randomProperties" : {
                    "summary" : "Sample random properties response",
                    "description" : "A sample response with two random properties",
                    "value" : [ {
                      "id" : "prop123456",
                      "title" : "Beautiful Beach House",
                      "price" : 450000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Cartagena",
                        "latitude" : 10.391049,
                        "longitude" : -75.479426
                      },
                      "propertyType" : "HOUSE",
                      "transactionType" : "SALE",
                      "bathrooms" : 3,
                      "bedrooms" : 4,
                      "area" : 250
                    }, {
                      "id" : "prop789012",
                      "title" : "Modern City Apartment",
                      "price" : 320000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Bogotá",
                        "latitude" : 4.710989,
                        "longitude" : -74.07209
                      },
                      "propertyType" : "APARTMENT",
                      "transactionType" : "SALE",
                      "bathrooms" : 2,
                      "bedrooms" : 3,
                      "area" : 120
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties/{propertyId}/related-properties" : {
      "get" : {
        "tags" : [ "properties" ],
        "summary" : "Fetch random list of properties related to a given property",
        "operationId" : "fetchRandomProperties",
        "parameters" : [ {
          "name" : "propertyId",
          "in" : "path",
          "description" : "Property ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "prop123456"
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK. List of related properties",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Property"
                  }
                },
                "examples" : {
                  "relatedProperties" : {
                    "summary" : "Sample related properties",
                    "description" : "A sample response with properties related to the specified property",
                    "value" : [ {
                      "id" : "prop123456",
                      "title" : "Beautiful Beach House",
                      "price" : 450000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Cartagena",
                        "latitude" : 10.391049,
                        "longitude" : -75.479426
                      },
                      "propertyType" : "HOUSE",
                      "transactionType" : "SALE",
                      "bathrooms" : 3,
                      "bedrooms" : 4,
                      "area" : 250
                    }, {
                      "id" : "prop789012",
                      "title" : "Modern City Apartment",
                      "price" : 320000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Bogotá",
                        "latitude" : 4.710989,
                        "longitude" : -74.07209
                      },
                      "propertyType" : "APARTMENT",
                      "transactionType" : "SALE",
                      "bathrooms" : 2,
                      "bedrooms" : 3,
                      "area" : 120
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties/search" : {
      "post" : {
        "tags" : [ "properties" ],
        "summary" : "Search properties with specified filters",
        "operationId" : "findProperties_1",
        "requestBody" : {
          "description" : "Property filter criteria",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PropertyFilterCriteria"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK. Search results with filtered properties",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Property"
                  }
                },
                "examples" : {
                  "searchResultsExample" : {
                    "summary" : "Sample search results",
                    "description" : "A sample response for property search",
                    "value" : {
                      "total" : 2,
                      "properties" : [ {
                        "id" : "prop123456",
                        "title" : "Beautiful Beach House",
                        "price" : 450000,
                        "currency" : "USD",
                        "location" : {
                          "country" : "Colombia",
                          "city" : "Cartagena",
                          "latitude" : 10.391049,
                          "longitude" : -75.479426
                        },
                        "propertyType" : "HOUSE",
                        "transactionType" : "SALE",
                        "bathrooms" : 3,
                        "bedrooms" : 4,
                        "area" : 250,
                        "publicationState" : "PUBLISHED"
                      }, {
                        "id" : "prop789012",
                        "title" : "Modern City Apartment",
                        "price" : 320000,
                        "currency" : "USD",
                        "location" : {
                          "country" : "Colombia",
                          "city" : "Bogotá",
                          "latitude" : 4.710989,
                          "longitude" : -74.07209
                        },
                        "propertyType" : "APARTMENT",
                        "transactionType" : "SALE",
                        "bathrooms" : 2,
                        "bedrooms" : 3,
                        "area" : 120,
                        "publicationState" : "PUBLISHED"
                      } ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties/by_location_range/{range}" : {
      "get" : {
        "tags" : [ "properties" ],
        "summary" : "Return the property list with specified user id",
        "operationId" : "findPropertiesByLocationRange_1",
        "parameters" : [ {
          "name" : "range",
          "in" : "path",
          "description" : "location range",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : { }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/properties/{propertyId}" : {
      "get" : {
        "tags" : [ "properties" ],
        "summary" : "Return the property with specified id",
        "description" : "Filter the properties existing in system with specified id. Returns empty if none property match the id",
        "operationId" : "findProperty_1",
        "parameters" : [ {
          "name" : "propertyId",
          "in" : "path",
          "description" : "Property ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "prop123456"
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "Password for protected properties",
          "schema" : {
            "type" : "string"
          },
          "example" : "securepass123"
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "If property not found"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK. Property found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Property"
                },
                "examples" : {
                  "foundProperty" : {
                    "summary" : "Found property example",
                    "description" : "A sample property response",
                    "value" : {
                      "id" : "prop123456",
                      "title" : "Beautiful Beach House",
                      "price" : 450000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Cartagena",
                        "latitude" : 10.391049,
                        "longitude" : -75.479426
                      },
                      "propertyType" : "HOUSE",
                      "transactionType" : "SALE",
                      "bathrooms" : 3,
                      "bedrooms" : 4,
                      "area" : 250,
                      "description" : "Spectacular beachfront property with amazing ocean views",
                      "features" : [ "POOL", "GARDEN", "TERRACE", "OCEAN_VIEW" ],
                      "publicationState" : "PUBLISHED",
                      "user" : {
                        "id" : 12345,
                        "name" : "John Doe",
                        "email" : "john@example.com",
                        "phone" : "+573001234567"
                      },
                      "images" : [ {
                        "id" : "img123",
                        "url" : "https://hallocasa.com/images/property123456_1.jpg",
                        "order" : 1
                      }, {
                        "id" : "img124",
                        "url" : "https://hallocasa.com/images/property123456_2.jpg",
                        "order" : 2
                      } ],
                      "createdAt" : "2023-05-15T10:30:45Z",
                      "updatedAt" : "2023-05-15T10:30:45Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties/detail/{id}" : {
      "get" : {
        "tags" : [ "properties" ],
        "summary" : "Return the property with specified id",
        "description" : "Filter the properties existing in system with specified id. Returns empty if none property match the id",
        "operationId" : "findPropertyOldUrl_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "property id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/properties/drafts" : {
      "get" : {
        "tags" : [ "properties" ],
        "summary" : "Password Protected Property for Signed in User",
        "operationId" : "getDraftsProperties_1",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK. List of draft properties",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Property"
                  }
                },
                "examples" : {
                  "draftProperties" : {
                    "summary" : "Sample draft properties",
                    "description" : "A sample response containing draft properties",
                    "value" : [ {
                      "id" : "draft123456",
                      "title" : "Mountain Retreat (Draft)",
                      "price" : 375000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Santa Marta",
                        "latitude" : 11.243259,
                        "longitude" : -74.213814
                      },
                      "propertyType" : "HOUSE",
                      "transactionType" : "SALE",
                      "bathrooms" : 2,
                      "bedrooms" : 3,
                      "area" : 180,
                      "publicationState" : "DRAFT"
                    }, {
                      "id" : "draft789012",
                      "title" : "Lakefront Cabin (Draft)",
                      "price" : 220000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Guatapé",
                        "latitude" : 6.234785,
                        "longitude" : -75.16786
                      },
                      "propertyType" : "HOUSE",
                      "transactionType" : "SALE",
                      "bathrooms" : 1,
                      "bedrooms" : 2,
                      "area" : 90,
                      "publicationState" : "DRAFT"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties/recent" : {
      "get" : {
        "tags" : [ "properties" ],
        "summary" : "Get recently created properties within specified minutes (default 60)",
        "operationId" : "getRecentProperties_1",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "Email to filter properties by user",
          "schema" : {
            "type" : "string"
          },
          "example" : "john@example.com"
        }, {
          "name" : "minutes",
          "in" : "query",
          "description" : "Minutes to look back (default 60)",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 60
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK. List of recent properties",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Property"
                  }
                },
                "examples" : {
                  "recentProperties" : {
                    "summary" : "Sample recent properties",
                    "description" : "A sample response with recently created properties",
                    "value" : [ {
                      "id" : "prop123456",
                      "title" : "Beautiful Beach House",
                      "price" : 450000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Cartagena",
                        "latitude" : 10.391049,
                        "longitude" : -75.479426
                      },
                      "propertyType" : "HOUSE",
                      "transactionType" : "SALE",
                      "bathrooms" : 3,
                      "bedrooms" : 4,
                      "area" : 250,
                      "createdAt" : "2023-05-15T10:30:45Z"
                    }, {
                      "id" : "prop789012",
                      "title" : "Modern City Apartment",
                      "price" : 320000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Bogotá",
                        "latitude" : 4.710989,
                        "longitude" : -74.07209
                      },
                      "propertyType" : "APARTMENT",
                      "transactionType" : "SALE",
                      "bathrooms" : 2,
                      "bedrooms" : 3,
                      "area" : 120,
                      "createdAt" : "2023-05-15T11:15:22Z"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties/password-protected" : {
      "get" : {
        "tags" : [ "properties" ],
        "summary" : "Password Protected Property for Signed in User",
        "operationId" : "getSecuredProperties_1",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK. List of password protected properties",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Property"
                  }
                },
                "examples" : {
                  "passwordProtectedProperties" : {
                    "summary" : "Sample password-protected properties",
                    "description" : "A sample response containing password-protected properties",
                    "value" : [ {
                      "id" : "prop123456",
                      "title" : "Private Mansion",
                      "price" : 1250000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Bogotá",
                        "latitude" : 4.710989,
                        "longitude" : -74.07209
                      },
                      "propertyType" : "HOUSE",
                      "transactionType" : "SALE",
                      "bathrooms" : 5,
                      "bedrooms" : 6,
                      "area" : 450,
                      "password" : "securepass123",
                      "publicationState" : "PASSWORD_PROTECTED"
                    }, {
                      "id" : "prop789012",
                      "title" : "Exclusive Penthouse",
                      "price" : 950000,
                      "currency" : "USD",
                      "location" : {
                        "country" : "Colombia",
                        "city" : "Medellín",
                        "latitude" : 6.244338,
                        "longitude" : -75.573553
                      },
                      "propertyType" : "APARTMENT",
                      "transactionType" : "SALE",
                      "bathrooms" : 3,
                      "bedrooms" : 4,
                      "area" : 200,
                      "password" : "private321",
                      "publicationState" : "PASSWORD_PROTECTED"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties/previews" : {
      "get" : {
        "tags" : [ "properties" ],
        "summary" : "Get HTML preview for a property",
        "description" : "Returns HTML preview for sharing a property on social media or messaging apps",
        "operationId" : "previewProperty_2",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "Property ID to generate preview for",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "prop123456"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Language code for the preview (e.g., 'en', 'es')",
          "schema" : {
            "type" : "string"
          },
          "example" : "en"
        }, {
          "name" : "Accept-Language",
          "in" : "header",
          "description" : "Browser's accepted language header",
          "schema" : {
            "type" : "string"
          },
          "example" : "en-US,en;q=0.9,es;q=0.8"
        } ],
        "responses" : {
          "400" : {
            "description" : "If required parameter is missing"
          },
          "404" : {
            "description" : "If property not found"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK. HTML preview of the property",
            "content" : {
              "text/html;charset=utf-8" : {
                "schema" : {
                  "type" : "string",
                  "description" : "HTML content for the property preview"
                },
                "examples" : {
                  "propertyPreview" : {
                    "summary" : "HTML property preview",
                    "description" : "A sample HTML preview of a property",
                    "value" : "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Beautiful Beach House - Hallocasa</title>\n    <meta property=\"og:title\" content=\"Beautiful Beach House\" />\n    <meta property=\"og:description\" content=\"Spectacular beachfront property with amazing ocean views in Cartagena, Colombia\" />\n    <meta property=\"og:image\" content=\"https://hallocasa.com/images/property123456_1.jpg\" />\n    <meta property=\"og:url\" content=\"https://hallocasa.com/property/prop123456\" />\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 0; }\n        .container { max-width: 800px; margin: 0 auto; padding: 20px; }\n        /* Additional styling... */\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Beautiful Beach House</h1>\n        <div class=\"property-image\">\n            <img src=\"https://hallocasa.com/images/property123456_1.jpg\" alt=\"Property Image\" />\n        </div>\n        <div class=\"property-details\">\n            <p class=\"price\">$450,000 USD</p>\n            <p class=\"location\">Cartagena, Colombia</p>\n            <p class=\"specs\">4 Bedrooms • 3 Bathrooms • 250 m²</p>\n            <p class=\"description\">Spectacular beachfront property with amazing ocean views</p>\n        </div>\n        <a href=\"https://hallocasa.com/property/prop123456\" class=\"view-button\">View Full Listing</a>\n    </div>\n</body>\n</html>\n"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties" : {
      "post" : {
        "tags" : [ "properties" ],
        "summary" : "Create or update the property supplied",
        "description" : "Consider that only user can saveNew its properties",
        "operationId" : "saveProperty_1",
        "requestBody" : {
          "description" : "Property to persist",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Property"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK. Property created or updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Property"
                },
                "examples" : {
                  "createdProperty" : {
                    "summary" : "Created property response",
                    "description" : "A sample response after creating a property",
                    "value" : {
                      "id" : "prop123456"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/properties/weekly-alert" : {
      "post" : {
        "tags" : [ "properties" ],
        "operationId" : "sendAlert_2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WeeklyAlertRange"
              }
            }
          }
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Returns how much new properties will be send out",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          }
        }
      }
    },
    "/properties/weekly-group-alert" : {
      "post" : {
        "tags" : [ "properties" ],
        "operationId" : "sendGroupAlert_1",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Returns how much new properties will be send out",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          }
        }
      }
    },
    "/property-types" : {
      "get" : {
        "tags" : [ "property types" ],
        "summary" : "Get all property types",
        "description" : "Retrieves a list of all property types available in the system, including their IDs, names, language keys, active status, and associated property type groups.",
        "operationId" : "getAllPropertyTypes_1",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PropertyType"
                  }
                },
                "examples" : {
                  "Property types list" : {
                    "summary" : "List of property types with their details",
                    "description" : "Property types list",
                    "value" : [ {
                      "id" : 1,
                      "name" : "House",
                      "lang" : "hallocasa.propertytype.house",
                      "active" : true,
                      "group" : {
                        "id" : 3,
                        "name" : "Living"
                      }
                    }, {
                      "id" : 2,
                      "name" : "Apartment",
                      "lang" : "hallocasa.propertytype.apartment",
                      "active" : true,
                      "group" : {
                        "id" : 3,
                        "name" : "Living"
                      }
                    }, {
                      "id" : 3,
                      "name" : "Commercial Space",
                      "lang" : "hallocasa.propertytype.commercial",
                      "active" : true,
                      "group" : {
                        "id" : 2,
                        "name" : "Stand-Alone"
                      }
                    }, {
                      "id" : 4,
                      "name" : "Land",
                      "lang" : "hallocasa.propertytype.land",
                      "active" : true,
                      "group" : {
                        "id" : 1,
                        "name" : "Lots"
                      }
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/testimonial/{testimonialId}/publication-state/{publicationState}" : {
      "post" : {
        "tags" : [ "testimonial" ],
        "summary" : "Publication state update",
        "operationId" : "changePublicationStatus",
        "parameters" : [ {
          "name" : "testimonialId",
          "in" : "path",
          "description" : "Testimonial Id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "publicationState",
          "in" : "path",
          "description" : "Publication State",
          "required" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Testimonial"
                },
                "example" : {
                  "id" : 123,
                  "published" : true
                }
              }
            }
          }
        }
      }
    },
    "/testimonial/published" : {
      "get" : {
        "tags" : [ "testimonial" ],
        "summary" : "Fetch User Posted list of testimonials",
        "operationId" : "fetchPublishedTestimonials_1",
        "parameters" : [ {
          "name" : "pageFrom",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageTo",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestimonialFilterResult"
                },
                "example" : {
                  "count" : 10,
                  "testimonialList" : [ {
                    "id" : 1,
                    "published" : true,
                    "publisher" : {
                      "id" : 100
                    },
                    "user" : {
                      "id" : 200
                    },
                    "text" : "Great service!",
                    "rating" : 5
                  } ]
                }
              }
            }
          }
        }
      }
    },
    "/testimonial" : {
      "get" : {
        "tags" : [ "testimonial" ],
        "summary" : "Fetch User Received list of testimonials",
        "operationId" : "fetchReceivedTestimonials_1",
        "parameters" : [ {
          "name" : "pageFrom",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageTo",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestimonialFilterResult"
                },
                "example" : {
                  "count" : 5,
                  "testimonialList" : [ {
                    "id" : 1,
                    "published" : true,
                    "publisher" : {
                      "id" : 101
                    },
                    "user" : {
                      "id" : 102
                    },
                    "text" : "Excellent service",
                    "rating" : 5
                  }, {
                    "id" : 2,
                    "published" : true,
                    "publisher" : {
                      "id" : 103
                    },
                    "user" : {
                      "id" : 102
                    },
                    "text" : "Great experience",
                    "rating" : 4
                  } ]
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "testimonial" ],
        "summary" : "Create or update the Testimonial supplied",
        "description" : "Consider that only user can save new testimonials",
        "operationId" : "saveTestimonial_1",
        "requestBody" : {
          "description" : "Testimonial to persist",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Testimonial"
              },
              "example" : {
                "publisher" : {
                  "id" : 101
                },
                "user" : {
                  "id" : 202
                },
                "text" : "Excellent communication and professionalism",
                "rating" : 5
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Testimonial"
                },
                "example" : {
                  "id" : 42,
                  "published" : false
                }
              }
            }
          }
        }
      }
    },
    "/testimonial/{testimonialId}" : {
      "get" : {
        "tags" : [ "testimonial" ],
        "summary" : "Return the testimonial with specified id, it needs to be published",
        "operationId" : "findTestimonial_1",
        "parameters" : [ {
          "name" : "testimonialId",
          "in" : "path",
          "description" : "testimonial id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "If server internal error"
          },
          "404" : {
            "description" : "Testimonial not found"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Testimonial"
                },
                "example" : {
                  "id" : 123,
                  "published" : true,
                  "publisher" : {
                    "id" : 101,
                    "name" : "John Smith",
                    "profileImage" : "http://example.com/profile.jpg"
                  },
                  "user" : {
                    "id" : 202,
                    "name" : "Jane Doe"
                  },
                  "text" : "Very professional and helpful agent",
                  "rating" : 5,
                  "publishDate" : "2023-06-15T10:30:45Z"
                }
              }
            }
          }
        }
      }
    },
    "/testimonial/requested" : {
      "get" : {
        "tags" : [ "testimonial" ],
        "summary" : "Return the testimonial Requests a user Created",
        "operationId" : "findTestimonialRequests_1",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Testimonial"
                  }
                },
                "example" : [ {
                  "id" : 123,
                  "published" : false,
                  "publisher" : {
                    "id" : 101
                  },
                  "user" : {
                    "id" : 202
                  },
                  "requestDate" : "2023-07-10T15:20:30Z"
                }, {
                  "id" : 124,
                  "published" : false,
                  "publisher" : {
                    "id" : 101
                  },
                  "user" : {
                    "id" : 203
                  },
                  "requestDate" : "2023-07-15T09:45:12Z"
                } ]
              }
            }
          }
        }
      }
    },
    "/testimonial/request-received" : {
      "get" : {
        "tags" : [ "testimonial" ],
        "summary" : "Return the testimonial Requests a user Received",
        "operationId" : "findTestimonialRequestsReceived_1",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Testimonial"
                  }
                },
                "example" : [ {
                  "id" : 130,
                  "published" : false,
                  "publisher" : {
                    "id" : 105,
                    "name" : "Robert Johnson"
                  },
                  "user" : {
                    "id" : 101
                  },
                  "requestDate" : "2023-08-05T11:15:22Z"
                }, {
                  "id" : 131,
                  "published" : false,
                  "publisher" : {
                    "id" : 106,
                    "name" : "Maria Garcia"
                  },
                  "user" : {
                    "id" : 101
                  },
                  "requestDate" : "2023-08-10T14:30:45Z"
                } ]
              }
            }
          }
        }
      }
    },
    "/users/{id}/properties" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Return the property list with specified user id",
        "operationId" : "findPropertiesByUser_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "user id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pageFrom",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageTo",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "propertyPublicationState",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "xmlId",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "API-Version",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PropertyFilterResult"
                }
              }
            }
          },
          "400" : {
            "description" : "UserId is invalid"
          },
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/users/{id}/testimonials" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Return the testimonials list with specified user id",
        "operationId" : "findTestimonialsByUser_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "user id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pageFrom",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageTo",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestimonialFilterResult"
                }
              }
            }
          },
          "400" : {
            "description" : "UserId is invalid"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/users/{id}/request-testimonial" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Request testimonial from specified user id",
        "operationId" : "requestTestimonialFromUser_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "user id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestimonialRequest"
                }
              }
            }
          },
          "400" : {
            "description" : "UserId is invalid"
          },
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/log" : {
      "post" : {
        "tags" : [ "users" ],
        "operationId" : "saveLog_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LogEntry"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/password_recovery/send_email" : {
      "get" : {
        "tags" : [ "Password Recovery" ],
        "summary" : "Send an email to user that has forgotted his/her password",
        "description" : "In this email it will be contained all process information to change password and recover access",
        "operationId" : "sendEmail_1",
        "parameters" : [ {
          "name" : "Origin",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "examples" : {
                  "success" : {
                    "summary" : "Email sent successfully",
                    "description" : "success",
                    "value" : "Email sent successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/password_recovery/update_password" : {
      "post" : {
        "tags" : [ "Password Recovery" ],
        "summary" : "Update the password user, finishing the recovery password process",
        "operationId" : "updatePassword_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordRecoveryRequest"
              }
            }
          }
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized or token fails in validation"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "examples" : {
                  "success" : {
                    "summary" : "Password updated successfully",
                    "description" : "success",
                    "value" : "User password updated succesfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/password_recovery/validate_token" : {
      "get" : {
        "tags" : [ "Password Recovery" ],
        "summary" : "Validate that password recovery token supplied was valid and current",
        "operationId" : "validateToken_1",
        "responses" : {
          "401" : {
            "description" : "If token is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordRecoveryRequest"
                },
                "examples" : {
                  "validToken" : {
                    "summary" : "Valid token response",
                    "description" : "validToken",
                    "value" : {
                      "newPassword" : null,
                      "passwordRecoveryToken" : {
                        "id" : 123,
                        "idAssociated" : 456,
                        "tokenContent" : "abc123xyz789",
                        "dueDate" : "2023-12-31T23:59:59Z",
                        "active" : true,
                        "expeditionDate" : "2023-12-30T14:30:00Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/security/auth" : {
      "get" : {
        "tags" : [ "security" ],
        "summary" : "Authorize client application",
        "description" : "Generates an authorization code to be used with the token endpoint",
        "operationId" : "authorize_1",
        "responses" : {
          "302" : {
            "description" : "Redirect to client application with authorization code",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "Bad request - missing or invalid parameters"
          }
        }
      }
    },
    "/security/token" : {
      "post" : {
        "tags" : [ "security" ],
        "summary" : "Exchange authorization code for access token",
        "description" : "Exchanges the provided authorization code, username, and password for a token through which private application resources can be accessed. Note that the token expires in 15 minutes. When this happens, you must invoke this service again with the previously described parameters.",
        "operationId" : "requestToken_1",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "required" : [ "client-id", "code", "email", "password" ],
                "type" : "object",
                "properties" : {
                  "client-id" : {
                    "type" : "string",
                    "description" : "Client application identifier"
                  },
                  "code" : {
                    "type" : "string",
                    "description" : "Authorization code received from /auth endpoint"
                  },
                  "email" : {
                    "type" : "string",
                    "description" : "User email address"
                  },
                  "password" : {
                    "type" : "string",
                    "description" : "User password"
                  },
                  "grant_type" : {
                    "type" : "string",
                    "description" : "OAuth grant type (usually 'authorization_code')"
                  },
                  "client_secret" : {
                    "type" : "string",
                    "description" : "Client application secret"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Authentication successful, token generated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthInfoDto"
                },
                "examples" : {
                  "Valid user response" : {
                    "description" : "Valid user response",
                    "value" : {
                      "user" : {
                        "id" : 1234,
                        "email" : "user@example.com",
                        "firstName" : "John",
                        "lastName" : "Doe",
                        "confirmedFlag" : true,
                        "subscriptions" : [ ],
                        "userPermissions" : [ "USER", "PROPERTY_PUBLISH" ]
                      },
                      "securityToken" : {
                        "tokenValue" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                        "registered" : 1651234567890,
                        "expiresIn" : 900000
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - Invalid credentials"
          },
          "403" : {
            "description" : "Forbidden - User account is inactive"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/checkout-sessions" : {
      "post" : {
        "tags" : [ "checkout-sessions" ],
        "summary" : "Create checkout-session",
        "operationId" : "createCheckoutSession_2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckoutSessionDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "201" : {
            "description" : "Created checkout session"
          }
        }
      }
    },
    "/customer-sessions" : {
      "post" : {
        "tags" : [ "customer-sessions" ],
        "summary" : "Create checkout-session",
        "operationId" : "createCheckoutSession",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerSessionDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "201" : {
            "description" : "Created checkout session"
          }
        }
      }
    },
    "/stripe-webhooks/user-subscription-update" : {
      "post" : {
        "tags" : [ "stripe-webhooks" ],
        "summary" : "Notify user subscription change",
        "operationId" : "postUserSubscriptionChange_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StripeEvent"
              }
            }
          }
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Processed",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/subscription-plans" : {
      "get" : {
        "tags" : [ "subscriptions" ],
        "summary" : "Return the active and available subscription plans",
        "operationId" : "getAll_1",
        "parameters" : [ {
          "name" : "expand",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/users/{userId}/subscriptions" : {
      "get" : {
        "tags" : [ "subscriptions" ],
        "operationId" : "get",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "User not allowed to get others subscriptions"
          },
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserSubscriptionDto"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/subscriptions/active/features" : {
      "get" : {
        "tags" : [ "subscriptions" ],
        "operationId" : "getActiveFeatures_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SubscriptionPlanFeatureDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/alerts/{alertId}" : {
      "delete" : {
        "tags" : [ "alerts" ],
        "summary" : "Delete an alert",
        "description" : "Deletes a specific alert owned by the user",
        "operationId" : "deleteAlert_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user who owns the alert",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "alertId",
          "in" : "path",
          "description" : "ID of the alert to delete",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Alert deleted successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Alert successfully deleted\"}"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Authentication is required to access this resource\"}"
              }
            }
          },
          "403" : {
            "description" : "Forbidden - user doesn't own the alert",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"You do not have permission to delete this alert\"}"
              }
            }
          },
          "404" : {
            "description" : "User or alert not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Alert with ID 456 not found\"}"
              }
            }
          }
        }
      }
    },
    "/users/{userId}/alerts/{alertId}/result" : {
      "get" : {
        "tags" : [ "alerts" ],
        "summary" : "Get alert results",
        "description" : "Retrieves the results for a specific alert",
        "operationId" : "getAlertResult_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user who owns the alert",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "alertId",
          "in" : "path",
          "description" : "ID of the alert to retrieve results for",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Alert results retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                },
                "examples" : {
                  "alertResults" : {
                    "description" : "alertResults",
                    "value" : [ {
                      "id" : 1001,
                      "title" : "Beachfront Condo",
                      "price" : 250000,
                      "location" : "Miami Beach",
                      "bedrooms" : 2,
                      "bathrooms" : 2,
                      "area" : 1200,
                      "currency" : "USD",
                      "images" : [ "img1.jpg", "img2.jpg" ]
                    }, {
                      "id" : 1002,
                      "title" : "Downtown Apartment",
                      "price" : 180000,
                      "location" : "Miami Downtown",
                      "bedrooms" : 1,
                      "bathrooms" : 1,
                      "area" : 850,
                      "currency" : "USD",
                      "images" : [ "img3.jpg" ]
                    } ]
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Authentication is required to access this resource\"}"
              }
            }
          },
          "404" : {
            "description" : "User or alert not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Alert with ID 456 not found for user 123\"}"
              }
            }
          }
        }
      }
    },
    "/users/{userId}/alerts" : {
      "get" : {
        "tags" : [ "alerts" ],
        "summary" : "Get all alerts for a user",
        "description" : "Returns all alerts associated with the specified user ID",
        "operationId" : "getByUser_2",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user to retrieve alerts for",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of user alerts retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Alert"
                  }
                },
                "examples" : {
                  "alerts" : {
                    "description" : "alerts",
                    "value" : [ {
                      "id" : 1,
                      "name" : "Price Alert",
                      "criteria" : {
                        "priceMin" : 100000,
                        "priceMax" : 300000
                      },
                      "active" : true
                    }, {
                      "id" : 2,
                      "name" : "New Properties",
                      "criteria" : {
                        "location" : "Miami"
                      },
                      "active" : true
                    } ]
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Authentication is required to access this resource\"}"
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"User with specified ID not found\"}"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "alerts" ],
        "summary" : "Create a new alert",
        "description" : "Creates a new alert for the specified user",
        "operationId" : "saveAlert_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user to create the alert for",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Alert to be created",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Alert"
              },
              "examples" : {
                "alertRequest" : {
                  "description" : "alertRequest",
                  "value" : {
                    "name" : "Beach Properties",
                    "criteria" : {
                      "nearBeach" : true,
                      "priceMax" : 500000
                    },
                    "active" : true,
                    "type" : "PROPERTY"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Alert created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Alert"
                },
                "examples" : {
                  "createdAlert" : {
                    "description" : "createdAlert",
                    "value" : {
                      "id" : 3,
                      "name" : "Beach Properties",
                      "criteria" : {
                        "nearBeach" : true,
                        "priceMax" : 500000
                      },
                      "active" : true,
                      "type" : "PROPERTY",
                      "createdAt" : "2023-06-15T10:30:00Z"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid alert data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Invalid alert data\",\"details\":[\"name is required\",\"criteria must not be empty\"]}"
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Authentication is required to access this resource\"}"
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"User with ID 123 not found\"}"
              }
            }
          }
        }
      }
    },
    "/users/{userId}/alerts/newsletter-alerts" : {
      "get" : {
        "tags" : [ "alerts" ],
        "summary" : "Get newsletters subscribed to",
        "description" : "Retrieves all newsletters that the specified user has subscribed to",
        "operationId" : "newsletterAlerts_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user who subscribed to newsletters",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Newsletter alerts retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NewsletterSubscriberDto"
                  }
                },
                "examples" : {
                  "newsletterAlerts" : {
                    "description" : "newsletterAlerts",
                    "value" : [ {
                      "alert" : {
                        "id" : 7,
                        "name" : "Market Insights",
                        "type" : "NEWSLETTER",
                        "criteria" : {
                          "topic" : "market-trends"
                        },
                        "active" : true,
                        "createdAt" : "2023-05-10T14:20:00Z"
                      },
                      "user" : {
                        "id" : 201,
                        "email" : "publisher@example.com",
                        "name" : "Jane Smith",
                        "phone" : "+1987654321",
                        "role" : "PUBLISHER"
                      }
                    } ]
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Authentication is required to access this resource\"}"
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"User with ID 123 not found\"}"
              }
            }
          }
        }
      }
    },
    "/users/{userId}/alerts/newsletter-subscribers" : {
      "get" : {
        "tags" : [ "alerts" ],
        "summary" : "Get newsletter subscribers",
        "description" : "Retrieves all subscribers to newsletters owned by the specified user",
        "operationId" : "newsletterSubscribers_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user who owns the newsletters",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Newsletter subscribers retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NewsletterSubscriberDto"
                  }
                },
                "examples" : {
                  "newsletterSubscribers" : {
                    "description" : "newsletterSubscribers",
                    "value" : [ {
                      "alert" : {
                        "id" : 5,
                        "name" : "Weekly Newsletter",
                        "type" : "NEWSLETTER",
                        "criteria" : {
                          "category" : "real-estate"
                        },
                        "active" : true
                      },
                      "user" : {
                        "id" : 102,
                        "email" : "subscriber@example.com",
                        "name" : "John Doe",
                        "phone" : "+1234567890"
                      }
                    } ]
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Authentication is required to access this resource\"}"
              }
            }
          },
          "404" : {
            "description" : "User not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"User with ID 123 not found\"}"
              }
            }
          }
        }
      }
    },
    "/users/{userId}/alerts/send-alert" : {
      "post" : {
        "tags" : [ "alerts" ],
        "summary" : "Send customized property alerts",
        "description" : "Triggers the sending of customized property alerts to users",
        "operationId" : "sendAlert",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Alerts sent successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "examples" : {
                  "success" : {
                    "description" : "success",
                    "value" : {
                      "message" : "Alerts successfully sent to 42 users"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "{\"message\":\"Authentication is required to access this resource\"}"
              }
            }
          }
        }
      }
    },
    "/brokerages" : {
      "get" : {
        "tags" : [ "brokerages" ],
        "summary" : "Retrieve all brokerages",
        "description" : "Returns a list of all available brokerages in the system",
        "operationId" : "retrieve_1",
        "responses" : {
          "200" : {
            "description" : "List of brokerages retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Brokerage"
                  }
                },
                "examples" : {
                  "brokerages" : {
                    "summary" : "Example of brokerages list",
                    "description" : "brokerages",
                    "value" : [ {
                      "id" : 1,
                      "name" : "Premium Real Estate",
                      "enabled" : true,
                      "createdAt" : 1609459200000,
                      "updatedAt" : 1609545600000,
                      "deletedAt" : null
                    }, {
                      "id" : 2,
                      "name" : "Global Properties",
                      "enabled" : true,
                      "createdAt" : 1609459200000,
                      "updatedAt" : 1609545600000,
                      "deletedAt" : null
                    } ]
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error",
            "content" : {
              "application/json" : {
                "example" : {
                  "error" : "Internal server error",
                  "message" : "An unexpected error occurred"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/endorsements" : {
      "get" : {
        "tags" : [ "endorsements" ],
        "summary" : "Retrieve endorsements for a user",
        "description" : "Gets all endorsements for a specified user. Can be filtered by endorser ID.",
        "operationId" : "retrieveEndorsementsByUser_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user to get endorsements for",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 12345
        }, {
          "name" : "endorser",
          "in" : "query",
          "description" : "Optional endorser ID to filter results",
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 54321
        } ],
        "responses" : {
          "200" : {
            "description" : "List of endorsements",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SkillEndorsement"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          },
          "401" : {
            "description" : "Unauthorized access"
          }
        }
      }
    },
    "/users/{userId}/favorites" : {
      "get" : {
        "tags" : [ "favorites" ],
        "summary" : "Get user favorites",
        "description" : "Retrieves all favorites for a specific user",
        "operationId" : "getByUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 100
        }, {
          "name" : "includeResource",
          "in" : "query",
          "description" : "Whether to include the associated resource details",
          "schema" : {
            "type" : "boolean"
          },
          "example" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "List of user favorites",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Favorite"
                  }
                },
                "examples" : {
                  "favorites" : {
                    "description" : "favorites",
                    "value" : [ {
                      "id" : 1,
                      "userId" : 100,
                      "resourceId" : 500,
                      "resourceType" : "PROPERTY"
                    }, {
                      "id" : 2,
                      "userId" : 100,
                      "resourceId" : 501,
                      "resourceType" : "PROPERTY"
                    } ]
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "post" : {
        "tags" : [ "favorites" ],
        "summary" : "Add a favorite",
        "description" : "Adds a new favorite item for a specific user",
        "operationId" : "postUserFavorite_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 100
        } ],
        "requestBody" : {
          "description" : "Favorite to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Favorite"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Favorite successfully added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Favorite"
                },
                "examples" : {
                  "favorite" : {
                    "description" : "favorite",
                    "value" : {
                      "id" : 1,
                      "userId" : 100,
                      "resourceId" : 500,
                      "resourceType" : "PROPERTY"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid favorite data"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/users/{userId}/favorites/{favoriteId}" : {
      "delete" : {
        "tags" : [ "favorites" ],
        "summary" : "Remove a favorite",
        "description" : "Removes a specific favorite from a user's favorites list",
        "operationId" : "removeUserFavorite_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 100
        }, {
          "name" : "favoriteId",
          "in" : "path",
          "description" : "ID of the favorite to remove",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Favorite successfully removed",
            "content" : {
              "application/json" : {
                "examples" : {
                  "success" : {
                    "description" : "success",
                    "value" : "Favorite removed"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Favorite not found"
          }
        }
      }
    },
    "/groups/{groupId}/users/search" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Search users within a specified group",
        "description" : "Searches for users within a specific group matching the specified filter criteria",
        "operationId" : "searchGroupUsers_1",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "description" : "Group ID",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "group123"
        } ],
        "requestBody" : {
          "description" : "User search filters within the group. Supports filtering by user attributes, location, skills, and social preferences. The resultRequest field controls pagination and sorting. Only one sort order can be specified at a time.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserFilterRequest"
              },
              "examples" : {
                "comprehensiveFilter" : {
                  "summary" : "Comprehensive filter with all options",
                  "description" : "comprehensiveFilter",
                  "value" : {
                    "resultRequest" : {
                      "pageFrom" : 0,
                      "pageTo" : 20,
                      "orderByMostRecentLogin" : true,
                      "orderByLessRecentLogin" : false,
                      "orderByMostRecent" : false,
                      "orderByLessRecent" : false,
                      "asc" : false,
                      "loadCount" : true,
                      "orderBy" : [ "lastName", "firstName" ]
                    },
                    "name" : "John",
                    "countries" : [ "US", "CA" ],
                    "latitude" : 40.7128,
                    "longitude" : -74.006,
                    "radius" : 50,
                    "userTypes" : [ "BROKER", "AGENT" ],
                    "languages" : [ "EN", "ES" ],
                    "filterWhatsApp" : true,
                    "filterTelephoneNumber" : true,
                    "filterGooglePlaceId" : false,
                    "filterFocusOnCommercial" : true,
                    "filterFocusOnResidential" : false,
                    "filterFocusOnRental" : true,
                    "filterFocusOnSelling" : false,
                    "filterSocial" : true,
                    "brokerages" : [ 123, 456 ],
                    "userIds" : [ 789, 1011 ]
                  }
                },
                "simpleNameSearch" : {
                  "summary" : "Simple search by name",
                  "description" : "simpleNameSearch",
                  "value" : {
                    "resultRequest" : {
                      "pageFrom" : 0,
                      "pageTo" : 10,
                      "loadCount" : true
                    },
                    "name" : "Smith"
                  }
                },
                "locationBasedSearch" : {
                  "summary" : "Location-based search with radius",
                  "description" : "locationBasedSearch",
                  "value" : {
                    "resultRequest" : {
                      "pageFrom" : 0,
                      "pageTo" : 50,
                      "orderByMostRecent" : true,
                      "loadCount" : true
                    },
                    "latitude" : 40.7128,
                    "longitude" : -74.006,
                    "radius" : 25,
                    "userTypes" : [ "BROKER" ],
                    "filterFocusOnCommercial" : true
                  }
                },
                "specificUsersSearch" : {
                  "summary" : "Search for specific users by ID",
                  "description" : "specificUsersSearch",
                  "value" : {
                    "resultRequest" : {
                      "pageFrom" : 0,
                      "pageTo" : 100
                    },
                    "userIds" : [ 123, 456, 789 ]
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "403" : {
            "description" : "If user is not a member or owner of the group"
          },
          "404" : {
            "description" : "If group is not found"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserFilterResult"
                },
                "examples" : {
                  "groupUserSearchResult" : {
                    "summary" : "Group user search results",
                    "description" : "groupUserSearchResult",
                    "value" : {
                      "users" : [ {
                        "id" : 123,
                        "firstName" : "John",
                        "lastName" : "Doe",
                        "skills" : [ "Real Estate" ],
                        "groupMemberStatus" : "ACCEPTED"
                      } ],
                      "total" : 1,
                      "page" : 1,
                      "pageSize" : 20
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/skills" : {
      "get" : {
        "tags" : [ "skills" ],
        "summary" : "Retrieve all user skills",
        "description" : "Returns a list of all available user skills in the system",
        "operationId" : "retrieveUserSkills_2",
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved the list of skills",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Skill"
                  }
                },
                "examples" : {
                  "skillsExample" : {
                    "summary" : "Example of skills list response",
                    "description" : "skillsExample",
                    "value" : [ {
                      "id" : 1,
                      "label" : "Real Estate Sales",
                      "locale" : "en"
                    }, {
                      "id" : 2,
                      "label" : "Property Management",
                      "locale" : "en"
                    }, {
                      "id" : 3,
                      "label" : "Ventas Inmobiliarias",
                      "locale" : "es"
                    } ]
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/user-types" : {
      "get" : {
        "tags" : [ "user-types" ],
        "summary" : "Get user types",
        "description" : "Returns all available user types in the system",
        "operationId" : "getUserTypes_1",
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserType"
                  }
                },
                "examples" : {
                  "userTypes" : {
                    "summary" : "List of user types",
                    "description" : "userTypes",
                    "value" : [ {
                      "id" : 1,
                      "name" : "ADMIN",
                      "lang" : "en",
                      "tooltipLang" : "admin.tooltip",
                      "manageTooltip" : true
                    }, {
                      "id" : 2,
                      "name" : "AGENT",
                      "lang" : "en",
                      "tooltipLang" : "agent.tooltip",
                      "manageTooltip" : true
                    } ]
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/users/activate-user" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Activate the account of specified user",
        "description" : "Activates a user account using the activation key sent to their email",
        "operationId" : "activateUser_1",
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "text/html" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "User activated successfully"
              }
            }
          }
        }
      }
    },
    "/users/{userId}/phone-code-check" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Verify the phone code sent to user",
        "description" : "Verifies the code that was sent to the user's phone",
        "operationId" : "checkPhoneVerificationCodeCommand_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 123
          }
        } ],
        "requestBody" : {
          "description" : "Phone code verification details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PhoneCodeCheckResource"
              },
              "examples" : {
                "phoneCodeCheckExample" : {
                  "summary" : "Example phone code verification",
                  "description" : "phoneCodeCheckExample",
                  "value" : {
                    "code" : "123456"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "400" : {
            "description" : "Wrong verification code"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PhoneCodeCheckResource"
                },
                "examples" : {
                  "phoneCodeCheck" : {
                    "summary" : "Phone code verification response",
                    "description" : "phoneCodeCheck",
                    "value" : {
                      "code" : "123456"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/fetch-random" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Fetch random list of users, with basic data",
        "description" : "Retrieves a random selection of users based on specified criteria",
        "operationId" : "fetchRandomUsers_1",
        "requestBody" : {
          "description" : "User list request parameters",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserListRequest"
              },
              "examples" : {
                "userListRequest" : {
                  "summary" : "Example user list request",
                  "description" : "userListRequest",
                  "value" : {
                    "count" : 10,
                    "excludeUserIds" : [ 123, 456 ],
                    "targetLocationCountryCode" : "US"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SkilledUser"
                  }
                },
                "examples" : {
                  "randomUsers" : {
                    "summary" : "List of random users",
                    "description" : "randomUsers",
                    "value" : [ {
                      "id" : 123,
                      "firstName" : "John",
                      "lastName" : "Doe",
                      "profileName" : "johndoe"
                    }, {
                      "id" : 456,
                      "firstName" : "Jane",
                      "lastName" : "Smith",
                      "profileName" : "janesmith"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Fetch user detail according to its id",
        "description" : "Gets detailed user information by user ID",
        "operationId" : "find",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "user id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "404" : {
            "description" : "User not found"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SkilledUser"
                },
                "examples" : {
                  "userDetail" : {
                    "summary" : "User details response",
                    "description" : "userDetail",
                    "value" : {
                      "id" : 123,
                      "email" : "user@example.com",
                      "firstName" : "John",
                      "lastName" : "Doe",
                      "profileName" : "johndoe",
                      "cellPhone" : "+1234567890",
                      "active" : true,
                      "skills" : [ "Real Estate", "Marketing" ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Fetch user detail according to its profile name",
        "description" : "Gets user information by their unique profile name",
        "operationId" : "find_1",
        "parameters" : [ {
          "name" : "profileName",
          "in" : "query",
          "description" : "User's profile name",
          "schema" : {
            "type" : "string"
          },
          "example" : "johndoe"
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SkilledUser"
                  }
                },
                "examples" : {
                  "userByProfileName" : {
                    "summary" : "User details by profile name",
                    "description" : "userByProfileName",
                    "value" : [ {
                      "id" : 123,
                      "email" : "johndoe@example.com",
                      "firstName" : "John",
                      "lastName" : "Doe",
                      "profileName" : "johndoe"
                    } ]
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Save the data of user in the system",
        "description" : "Updates user profile information in the system",
        "operationId" : "save",
        "parameters" : [ {
          "name" : "O-Auth-Token",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "User data to save",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SkilledUser"
              },
              "examples" : {
                "userExample" : {
                  "summary" : "Example user data",
                  "description" : "userExample",
                  "value" : {
                    "id" : 123,
                    "email" : "user@example.com",
                    "firstName" : "John",
                    "lastName" : "Doe",
                    "profileName" : "johndoe",
                    "cellPhone" : "+1234567890"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "text/html" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "User saved successfully"
              }
            }
          }
        }
      }
    },
    "/users/list/{userIds}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Fetch multiple user detail according to its ids",
        "description" : "Gets detailed information for multiple users by their IDs",
        "operationId" : "findList_1",
        "parameters" : [ {
          "name" : "userIds",
          "in" : "path",
          "description" : "Comma-separated list of user IDs",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "123,456,789"
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SkilledUser"
                  }
                },
                "examples" : {
                  "userList" : {
                    "summary" : "List of users",
                    "description" : "userList",
                    "value" : [ {
                      "id" : 123,
                      "email" : "user1@example.com",
                      "firstName" : "John",
                      "lastName" : "Doe"
                    }, {
                      "id" : 456,
                      "email" : "user2@example.com",
                      "firstName" : "Jane",
                      "lastName" : "Smith"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/connections" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a user connections",
        "description" : "Retrieves the list of connections for a specific user",
        "operationId" : "findUserConnections",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 123
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SkilledUser"
                  }
                },
                "examples" : {
                  "userConnections" : {
                    "summary" : "User connections list",
                    "description" : "userConnections",
                    "value" : [ {
                      "id" : 456,
                      "firstName" : "Jane",
                      "lastName" : "Smith",
                      "profileName" : "janesmith"
                    }, {
                      "id" : 789,
                      "firstName" : "Bob",
                      "lastName" : "Johnson",
                      "profileName" : "bjohnson"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/subscribed-users/{subscriptionPlanName}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Gets the users subscribed to a subscription plan name like Professional",
        "description" : "Retrieves all users who have subscribed to the specified subscription plan",
        "operationId" : "getSubscribedUsers_1",
        "parameters" : [ {
          "name" : "subscriptionPlanName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "example" : "Professional"
          }
        } ],
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SubscribedUser"
                  }
                },
                "examples" : {
                  "subscribedUsers" : {
                    "summary" : "List of subscribed users",
                    "description" : "subscribedUsers",
                    "value" : [ {
                      "id" : 123,
                      "email" : "user@example.com",
                      "firstName" : "John",
                      "lastName" : "Doe",
                      "subscriptionPlanName" : "Professional",
                      "subscriptionStartDate" : "2023-01-15"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/previews" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get HTML preview of a user profile",
        "description" : "Generates an HTML preview of a user profile for sharing purposes",
        "operationId" : "previewProperty",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 123
          }
        }, {
          "name" : "lang",
          "in" : "query",
          "schema" : {
            "type" : "string",
            "example" : "en"
          }
        }, {
          "name" : "Accept-Language",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "HTML preview of user profile",
            "content" : {
              "text/html" : {
                "schema" : {
                  "type" : "string"
                },
                "example" : "HTML preview of user profile"
              }
            }
          }
        }
      }
    },
    "/users/register" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Register new user in the system",
        "description" : "Creates a new user account in the system",
        "operationId" : "register_1",
        "parameters" : [ {
          "name" : "Origin",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "skipEmailValidation",
          "in" : "query",
          "description" : "Skip email validation step",
          "schema" : {
            "type" : "boolean"
          },
          "example" : false
        } ],
        "requestBody" : {
          "description" : "User registration data",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SkilledUser"
              },
              "examples" : {
                "userRegistration" : {
                  "summary" : "Example user registration data",
                  "description" : "userRegistration",
                  "value" : {
                    "email" : "newuser@example.com",
                    "password" : "Password123",
                    "firstName" : "Jane",
                    "lastName" : "Smith",
                    "profileName" : "janesmith",
                    "cellPhone" : "+1234567890"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "text/html" : {
                "example" : "User registered succesfully"
              }
            }
          }
        }
      }
    },
    "/users/activation_link_request" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Request activation link",
        "description" : "Sends an activation link to the user's email for account verification",
        "operationId" : "requestActivationLink_1",
        "parameters" : [ {
          "name" : "Origin",
          "in" : "header",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "email" : {
                    "type" : "string",
                    "example" : "user@example.com"
                  },
                  "password" : {
                    "type" : "string",
                    "example" : "Password123"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Activation link sent successfully"
          },
          "400" : {
            "description" : "Invalid email or password"
          }
        }
      }
    },
    "/users/search" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Search users with specified filters",
        "description" : "Searches for users matching the specified filter criteria",
        "operationId" : "searchUsers_1",
        "requestBody" : {
          "description" : "User search filters",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserFilterRequest"
              },
              "examples" : {
                "basicSearch" : {
                  "summary" : "Basic user search by name and location",
                  "description" : "basicSearch",
                  "value" : {
                    "resultRequest" : {
                      "pageSize" : 20,
                      "pageNumber" : 1,
                      "orderByMostRecent" : true
                    },
                    "name" : "John",
                    "countries" : [ "US", "CA" ]
                  }
                },
                "locationBasedSearch" : {
                  "summary" : "Search users within 50km radius",
                  "description" : "locationBasedSearch",
                  "value" : {
                    "resultRequest" : {
                      "pageSize" : 10,
                      "pageNumber" : 1
                    },
                    "latitude" : 40.7128,
                    "longitude" : -74.006,
                    "radius" : 50,
                    "userTypes" : [ "BROKER", "AGENT" ]
                  }
                },
                "advancedSearch" : {
                  "summary" : "Advanced search with multiple filters",
                  "description" : "advancedSearch",
                  "value" : {
                    "resultRequest" : {
                      "pageSize" : 25,
                      "pageNumber" : 1,
                      "orderByMostRecentLogin" : true
                    },
                    "countries" : [ "US" ],
                    "userTypes" : [ "BROKER" ],
                    "languages" : [ "EN", "ES" ],
                    "filterWhatsApp" : true,
                    "filterTelephoneNumber" : true,
                    "filterFocusOnCommercial" : true,
                    "filterFocusOnRental" : true,
                    "filterSocial" : true
                  }
                },
                "brokerageSearch" : {
                  "summary" : "Search users by specific brokerages",
                  "description" : "brokerageSearch",
                  "value" : {
                    "resultRequest" : {
                      "pageSize" : 15,
                      "pageNumber" : 1
                    },
                    "brokerages" : [ 123, 456, 789 ],
                    "filterFocusOnResidential" : true,
                    "filterFocusOnSelling" : true
                  }
                },
                "specificUsersSearch" : {
                  "summary" : "Search specific users by IDs",
                  "description" : "specificUsersSearch",
                  "value" : {
                    "resultRequest" : {
                      "pageSize" : 50,
                      "pageNumber" : 1
                    },
                    "userIds" : [ 100, 200, 300, 400, 500 ]
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserFilterResult"
                },
                "examples" : {
                  "userSearchResult" : {
                    "summary" : "User search results",
                    "description" : "userSearchResult",
                    "value" : {
                      "users" : [ {
                        "id" : 123,
                        "firstName" : "John",
                        "lastName" : "Doe",
                        "skills" : [ "Real Estate" ]
                      } ],
                      "total" : 1,
                      "page" : 1,
                      "pageSize" : 20
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/weekly-payed-subscribers-alert" : {
      "get" : {
        "tags" : [ "users" ],
        "operationId" : "sendPayedSusbscribersAlert_1",
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          }
        }
      }
    },
    "/users/{userId}/phone-code-request" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Send a code to the previously saved phone number of the user",
        "description" : "Sends a verification code to the user's phone number for verification purposes",
        "operationId" : "sendPhoneVerificationCodeCommand_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 123
          }
        } ],
        "requestBody" : {
          "description" : "Phone code request details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PhoneCodeRequestResource"
              },
              "examples" : {
                "phoneCodeRequestExample" : {
                  "summary" : "Example phone code request",
                  "description" : "phoneCodeRequestExample",
                  "value" : {
                    "verificationType" : "SMS"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "401" : {
            "description" : "If user is unauthorized"
          },
          "500" : {
            "description" : "If server internal error"
          },
          "200" : {
            "description" : "Ok. Generated resource",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PhoneCodeRequestResource"
                },
                "examples" : {
                  "phoneCodeRequest" : {
                    "summary" : "Phone code request response",
                    "description" : "phoneCodeRequest",
                    "value" : {
                      "verificationType" : "SMS"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/skills" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve user skills",
        "description" : "Returns all skills associated with a user",
        "operationId" : "retrieveUserSkills",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user to retrieve skills for",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserSkill"
                  }
                },
                "examples" : {
                  "User skills example" : {
                    "description" : "User skills example",
                    "value" : [ {
                      "id" : 1,
                      "user" : {
                        "id" : 42
                      },
                      "skill" : {
                        "id" : 5,
                        "name" : "Java"
                      },
                      "level" : 4
                    }, {
                      "id" : 2,
                      "user" : {
                        "id" : 42
                      },
                      "skill" : {
                        "id" : 8,
                        "name" : "Spring"
                      },
                      "level" : 3
                    } ]
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Add user skills",
        "description" : "This endpoint is not supported. Use save user profile to update skills instead.",
        "operationId" : "addUserSkills_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user to add skills to",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "List of skills to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/UserSkill"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "405" : {
            "description" : "Method not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "examples" : {
                  "Error example" : {
                    "description" : "Error example",
                    "value" : {
                      "message" : "Not supported",
                      "details" : "Use save user profile to update skills"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/skills/{skillId}/endorsements" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Retrieve skill endorsements",
        "description" : "Returns all endorsements for a specific user skill",
        "operationId" : "retrieveSkillEndorsements_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user whose skill endorsements to retrieve",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "skillId",
          "in" : "path",
          "description" : "ID of the skill to retrieve endorsements for",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SkillEndorsement"
                  }
                },
                "examples" : {
                  "Endorsements example" : {
                    "description" : "Endorsements example",
                    "value" : [ {
                      "id" : 123,
                      "endorser" : {
                        "id" : 15,
                        "firstName" : "John",
                        "lastName" : "Doe"
                      },
                      "dateTime" : "2023-06-14T10:15:30"
                    }, {
                      "id" : 124,
                      "endorser" : {
                        "id" : 18,
                        "firstName" : "Jane",
                        "lastName" : "Smith"
                      },
                      "dateTime" : "2023-06-15T14:22:45"
                    } ]
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Endorse a user skill",
        "description" : "Allows a user to endorse another user's skill",
        "operationId" : "endorseUserSkill_1",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user whose skill is being endorsed",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "skillId",
          "in" : "path",
          "description" : "ID of the skill being endorsed",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "description" : "Endorsement details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SkillEndorsement"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SkillEndorsement"
                },
                "examples" : {
                  "Skill endorsement example" : {
                    "description" : "Skill endorsement example",
                    "value" : {
                      "id" : 123,
                      "user" : {
                        "id" : 42
                      },
                      "endorser" : {
                        "id" : 15,
                        "firstName" : "John",
                        "lastName" : "Doe"
                      },
                      "skill" : {
                        "id" : 5,
                        "name" : "Java"
                      },
                      "dateTime" : "2023-06-14T10:15:30"
                    }
                  }
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict - cannot endorse the same skill twice",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                },
                "examples" : {
                  "Error example" : {
                    "description" : "Error example",
                    "value" : {
                      "message" : "Cannot endorse the same skill twice"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Attachment" : {
        "type" : "object",
        "properties" : {
          "userFrom" : {
            "$ref" : "#/components/schemas/User"
          },
          "userTo" : {
            "$ref" : "#/components/schemas/User"
          },
          "fileId" : {
            "type" : "string"
          },
          "uploadUrl" : {
            "type" : "string"
          },
          "downloadUrl" : {
            "type" : "string"
          },
          "originalName" : {
            "type" : "string"
          }
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "email" : {
            "maxLength" : 160,
            "minLength" : 0,
            "type" : "string"
          },
          "firstName" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "lastName" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "password" : {
            "type" : "string"
          },
          "confirmedFlag" : {
            "type" : "boolean"
          },
          "registerDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "webSite" : {
            "maxLength" : 80,
            "minLength" : 0,
            "type" : "string"
          },
          "linkedIn" : {
            "maxLength" : 160,
            "minLength" : 0,
            "type" : "string"
          },
          "skype" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "base64Image" : {
            "type" : "string"
          },
          "imageLink" : {
            "type" : "string"
          },
          "mainSpokenLanguage" : {
            "$ref" : "#/components/schemas/Language"
          },
          "telephonePrefix" : {
            "$ref" : "#/components/schemas/CountryTelephonePrefix"
          },
          "telephoneNumber" : {
            "type" : "string"
          },
          "userTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserType"
            }
          },
          "userLanguages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserLanguage"
            }
          },
          "userDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserDescription"
            }
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "role" : {
            "type" : "string"
          },
          "backgroundImageBase64" : {
            "type" : "string"
          },
          "backgroundImageLink" : {
            "type" : "string"
          },
          "profileName" : {
            "type" : "string"
          },
          "lastActivity" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chatStatus" : {
            "type" : "string"
          },
          "chatsCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "phoneVerified" : {
            "type" : "boolean"
          },
          "geoPlace" : {
            "$ref" : "#/components/schemas/GeoPlace"
          },
          "chamberOfCommerceUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "facebookUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "instagramUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "twitterUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "wechatUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "vkUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "videoUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "bookAnAppointmentUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "googlePlaceId" : {
            "type" : "string"
          },
          "googlePlaceReviews" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GooglePlaceReview"
            }
          },
          "achievementsYearsOfExperience" : {
            "type" : "integer",
            "format" : "int32"
          },
          "achievementsDealsClosed" : {
            "type" : "integer",
            "format" : "int32"
          },
          "achievementsPercentageOfAllAgents" : {
            "type" : "number",
            "format" : "double"
          },
          "achievementsGooglePlaceId" : {
            "type" : "string"
          },
          "focusOnCommercial" : {
            "type" : "boolean"
          },
          "focusOnResidential" : {
            "type" : "boolean"
          },
          "focusOnRental" : {
            "type" : "boolean"
          },
          "focusOnSelling" : {
            "type" : "boolean"
          },
          "imprintTitle" : {
            "type" : "string"
          },
          "imprintDescription" : {
            "type" : "string"
          },
          "imprintBase64Image" : {
            "type" : "string"
          },
          "imprintLogoLink" : {
            "type" : "string"
          },
          "showEmailInProfile" : {
            "type" : "boolean"
          },
          "showEmailInProperty" : {
            "type" : "boolean"
          },
          "showPhoneInProperty" : {
            "type" : "boolean"
          },
          "isAllowSaveContact" : {
            "type" : "boolean"
          },
          "city" : {
            "type" : "string"
          },
          "referral" : {
            "type" : "string"
          },
          "imprintImageLink" : {
            "type" : "string",
            "writeOnly" : true
          }
        }
      },
      "NotifyUploadRequest" : {
        "type" : "object",
        "properties" : {
          "fileName" : {
            "type" : "string"
          }
        }
      },
      "ChatAllowance" : {
        "type" : "object",
        "properties" : {
          "userFrom" : {
            "$ref" : "#/components/schemas/User"
          },
          "userTo" : {
            "$ref" : "#/components/schemas/User"
          },
          "currentDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chatAllowanceType" : {
            "type" : "string",
            "enum" : [ "REJECTED", "ACCEPTED", "PENDING", "BLOCKED", "SILENCED" ]
          }
        }
      },
      "ConversationSummary" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "lastMessage" : {
            "type" : "string"
          },
          "lastMessageDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "newMessagesCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "chatAllowanceType" : {
            "type" : "string",
            "enum" : [ "REJECTED", "ACCEPTED", "PENDING", "BLOCKED", "SILENCED" ]
          }
        }
      },
      "UserChatsSummary" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "conversationSummaries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationSummary"
            }
          }
        }
      },
      "LocalDateTimeQueryString" : {
        "type" : "object",
        "properties" : {
          "utcValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "millsFromEpoch" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ChatTicket" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "userId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ip" : {
            "type" : "string"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "expirationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "browser" : {
            "type" : "string"
          },
          "expired" : {
            "type" : "boolean"
          }
        }
      },
      "Contract" : {
        "type" : "object",
        "properties" : {
          "legalOwner" : {
            "$ref" : "#/components/schemas/User"
          },
          "counterParty" : {
            "$ref" : "#/components/schemas/User"
          },
          "creationDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "contractUrl" : {
            "type" : "string"
          },
          "ndaUrl" : {
            "type" : "string"
          },
          "legalOwnerSigned" : {
            "type" : "boolean"
          },
          "counterPartySigned" : {
            "type" : "boolean"
          }
        }
      },
      "Message" : {
        "type" : "object",
        "properties" : {
          "userFrom" : {
            "$ref" : "#/components/schemas/User"
          },
          "userTo" : {
            "$ref" : "#/components/schemas/User"
          },
          "text" : {
            "type" : "string"
          },
          "fileName" : {
            "type" : "string"
          },
          "fileId" : {
            "type" : "string"
          },
          "dateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "notifiedByChat" : {
            "type" : "boolean"
          }
        }
      },
      "Notification" : {
        "required" : [ "email", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "email" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "TO_BROKER__ALERT_CREATED", "TO_USER__WEEKLY_PROPERTIES", "TO_USER__WEEKLY_PAYED_SUBSCRIBERS", "TO_USER__CUSTOMIZED_ALERT", "TO_USER__WEEKLY_GROUP_PROPERTIES", "TO_USER__NEWSLETTER_NEW_SUBSCRIBER", "TO_USER__NEWSLETTER_CONFIRMATION", "TO_USER__NEWSLETTER_LISTING" ]
          },
          "currentDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "body" : {
            "type" : "object",
            "description" : "Notification body data in JSON format",
            "example" : {
              "message" : "You have a new alert",
              "count" : 5
            }
          }
        }
      },
      "AutopilotUser" : {
        "required" : [ "contactId", "email" ],
        "type" : "object",
        "properties" : {
          "contactId" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      },
      "CountryPhonePrefix" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "prefix" : {
            "type" : "integer",
            "format" : "int64"
          },
          "description" : {
            "type" : "string"
          },
          "lang" : {
            "type" : "string"
          }
        }
      },
      "Country" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Country identifier",
            "format" : "int64",
            "example" : 1
          },
          "code" : {
            "type" : "string",
            "description" : "Country code (ISO 3166 alpha-2)",
            "example" : "US"
          },
          "name" : {
            "type" : "string",
            "description" : "Country name",
            "example" : "United States"
          },
          "lang" : {
            "type" : "string",
            "description" : "Language code",
            "example" : "en"
          },
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "locale" : {
            "type" : "string",
            "description" : "Locale code",
            "example" : "en_US"
          }
        },
        "description" : "Country information"
      },
      "Currency" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Currency identifier",
            "format" : "int64",
            "example" : 1
          },
          "abbreviation" : {
            "type" : "string",
            "description" : "Currency code (ISO 4217)",
            "example" : "USD"
          },
          "name" : {
            "type" : "string",
            "description" : "Currency name",
            "example" : "US Dollar"
          },
          "lang" : {
            "type" : "string",
            "description" : "Language code",
            "example" : "en"
          },
          "prefix" : {
            "type" : "string",
            "description" : "Currency symbol",
            "example" : "$"
          }
        },
        "description" : "Currency information"
      },
      "ExchangeRateMap" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "formatted" : {
            "type" : "string"
          },
          "line1" : {
            "type" : "string"
          },
          "line2" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "zipCode" : {
            "type" : "string"
          }
        }
      },
      "GeoLocation" : {
        "type" : "object",
        "properties" : {
          "latitude" : {
            "type" : "number",
            "format" : "double"
          },
          "longitude" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "GeoPlace" : {
        "type" : "object",
        "properties" : {
          "geoLocation" : {
            "$ref" : "#/components/schemas/GeoLocation"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          }
        }
      },
      "Language" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "locale" : {
            "type" : "string"
          }
        }
      },
      "LocaleSet" : {
        "type" : "object",
        "properties" : {
          "pnemonic" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "enUS" : {
            "type" : "string"
          },
          "esES" : {
            "type" : "string"
          },
          "deDE" : {
            "type" : "string"
          },
          "zhCN" : {
            "type" : "string"
          },
          "ruRU" : {
            "type" : "string"
          },
          "frFR" : {
            "type" : "string"
          },
          "ptPT" : {
            "type" : "string"
          },
          "itIT" : {
            "type" : "string"
          },
          "jaJP" : {
            "type" : "string"
          }
        }
      },
      "TextTranslation" : {
        "type" : "object",
        "properties" : {
          "translatedText" : {
            "type" : "string"
          },
          "translatedLanguage" : {
            "type" : "string"
          },
          "originalText" : {
            "type" : "string"
          }
        }
      },
      "XmlUrl" : {
        "required" : [ "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string"
          }
        },
        "example" : {
          "url" : "https://example.com/properties.xml"
        }
      },
      "FBPropertyDto" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "availability" : {
            "type" : "string"
          },
          "latitude" : {
            "type" : "string"
          },
          "longitude" : {
            "type" : "string"
          },
          "price" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "home_listing_id" : {
            "type" : "string"
          },
          "home_listing_group_id" : {
            "type" : "string"
          },
          "address.addr1" : {
            "type" : "string"
          },
          "address.city" : {
            "type" : "string"
          },
          "address.region" : {
            "type" : "string"
          },
          "address.country" : {
            "type" : "string"
          },
          "address.postal_code" : {
            "type" : "string"
          },
          "image[0].url" : {
            "type" : "string"
          },
          "num_beds" : {
            "type" : "string"
          },
          "num_baths" : {
            "type" : "string"
          },
          "num_rooms" : {
            "type" : "string"
          },
          "property_type" : {
            "type" : "string"
          },
          "area_size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "area_unit" : {
            "type" : "string"
          }
        }
      },
      "BaseFilterResult" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int64"
          },
          "list" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        }
      },
      "CountryTelephonePrefix" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "prefix" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "lang" : {
            "type" : "string"
          }
        }
      },
      "GooglePlaceReview" : {
        "type" : "object",
        "properties" : {
          "authorName" : {
            "type" : "string"
          },
          "authorUrl" : {
            "type" : "string"
          },
          "language" : {
            "type" : "string"
          },
          "originalLanguage" : {
            "type" : "string"
          },
          "profilePhotoUrl" : {
            "type" : "string"
          },
          "rating" : {
            "type" : "integer",
            "format" : "int32"
          },
          "relativeTimeDescription" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "time" : {
            "type" : "string",
            "format" : "date-time"
          },
          "translated" : {
            "type" : "boolean"
          }
        }
      },
      "Group" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/User"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "locationLatitude" : {
            "type" : "number",
            "format" : "double"
          },
          "locationLongitude" : {
            "type" : "number",
            "format" : "double"
          },
          "locationName" : {
            "type" : "string"
          },
          "locationDescription" : {
            "type" : "string"
          },
          "backgroundImage" : {
            "type" : "string"
          },
          "logo" : {
            "type" : "string"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "groupStatus" : {
            "type" : "string",
            "enum" : [ "PENDING", "ACTIVE", "INACTIVE", "ARCHIVED", "DELETED" ]
          },
          "backgroundImageBase64" : {
            "type" : "string"
          },
          "logoImageBase64" : {
            "type" : "string"
          },
          "noOfMembers" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "GroupMember" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "group" : {
            "$ref" : "#/components/schemas/Group"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "groupMemberStatus" : {
            "type" : "string",
            "enum" : [ "INVITED", "REQUESTED", "ACCEPTED", "REJECTED", "REMOVED", "LEFT" ]
          }
        }
      },
      "UserDescription" : {
        "type" : "object",
        "properties" : {
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "UserLanguage" : {
        "type" : "object",
        "properties" : {
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "isMainLanguage" : {
            "type" : "boolean"
          }
        }
      },
      "UserType" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "lang" : {
            "type" : "string"
          },
          "tooltipLang" : {
            "type" : "string"
          },
          "manageTooltip" : {
            "type" : "boolean"
          }
        }
      },
      "DropdownOption" : {
        "type" : "object",
        "properties" : {
          "optionId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "data1" : {
            "type" : "string"
          },
          "data2" : {
            "type" : "string"
          },
          "data3" : {
            "type" : "string"
          },
          "data4" : {
            "type" : "string"
          },
          "data5" : {
            "type" : "string"
          },
          "data6" : {
            "type" : "string"
          },
          "data7" : {
            "type" : "string"
          },
          "data8" : {
            "type" : "string"
          },
          "dependsOnLang" : {
            "type" : "boolean"
          },
          "parentInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }
      },
      "DropdownOptionGroup" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "translationManagement" : {
            "type" : "string",
            "enum" : [ "TOTAL", "PARTIAL", "NONE" ]
          },
          "dropdownOptionList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DropdownOption"
            }
          }
        }
      },
      "Property" : {
        "required" : [ "user" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "propertyType" : {
            "$ref" : "#/components/schemas/PropertyType"
          },
          "propertyLocation" : {
            "$ref" : "#/components/schemas/PropertyLocation"
          },
          "propertyProposal" : {
            "$ref" : "#/components/schemas/PropertyProposal"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "propertyKey" : {
            "$ref" : "#/components/schemas/PropertyKey"
          },
          "fieldList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PropertyField"
            }
          },
          "publishDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifiedDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "publicationState" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "RENTED", "SOLD", "DRAFT" ]
          },
          "isPrivate" : {
            "type" : "boolean"
          },
          "isDraft" : {
            "type" : "boolean"
          },
          "groupIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "shouldPublishEmailsToGroups" : {
            "type" : "boolean"
          },
          "password" : {
            "type" : "string",
            "writeOnly" : true
          },
          "isPasswordProtected" : {
            "type" : "boolean"
          }
        }
      },
      "PropertyField" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "lang" : {
            "type" : "string"
          },
          "basic" : {
            "type" : "boolean"
          },
          "primaryKey" : {
            "type" : "boolean"
          },
          "multilanguageValue" : {
            "type" : "boolean"
          },
          "propertyFieldType" : {
            "$ref" : "#/components/schemas/PropertyFieldType"
          },
          "propertyFieldValueType" : {
            "$ref" : "#/components/schemas/PropertyFieldValueType"
          },
          "fieldValueList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PropertyFieldValue"
            }
          },
          "dropdownOptionGroup" : {
            "$ref" : "#/components/schemas/DropdownOptionGroup"
          },
          "tooltipLang" : {
            "type" : "string"
          },
          "textType" : {
            "type" : "string",
            "enum" : [ "SAME", "INT", "DOUBLE", "BOOLEAN", "TEXT", "DATE", "DATETIME", "FILE", "BIGINT" ]
          },
          "data1Type" : {
            "type" : "string",
            "enum" : [ "SAME", "INT", "DOUBLE", "BOOLEAN", "TEXT", "DATE", "DATETIME", "FILE", "BIGINT" ]
          },
          "data2Type" : {
            "type" : "string",
            "enum" : [ "SAME", "INT", "DOUBLE", "BOOLEAN", "TEXT", "DATE", "DATETIME", "FILE", "BIGINT" ]
          },
          "data3Type" : {
            "type" : "string",
            "enum" : [ "SAME", "INT", "DOUBLE", "BOOLEAN", "TEXT", "DATE", "DATETIME", "FILE", "BIGINT" ]
          },
          "hcListerOption" : {
            "type" : "string",
            "enum" : [ "PROPERTY_TYPE" ]
          }
        }
      },
      "PropertyFieldType" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "PropertyFieldValue" : {
        "type" : "object",
        "properties" : {
          "bdid" : {
            "type" : "integer",
            "format" : "int32"
          },
          "identifier" : {
            "type" : "integer",
            "format" : "int32"
          },
          "text" : {
            "$ref" : "#/components/schemas/PropertyFieldValueSpec"
          },
          "data1" : {
            "$ref" : "#/components/schemas/PropertyFieldValueSpec"
          },
          "data2" : {
            "$ref" : "#/components/schemas/PropertyFieldValueSpec"
          },
          "data3" : {
            "$ref" : "#/components/schemas/PropertyFieldValueSpec"
          }
        }
      },
      "PropertyFieldValueSpec" : {
        "type" : "object",
        "properties" : {
          "strVal" : {
            "maxLength" : 5000,
            "minLength" : 0,
            "type" : "string"
          },
          "boolVal" : {
            "type" : "boolean"
          },
          "dateVal" : {
            "type" : "string",
            "format" : "date-time"
          },
          "doubleVal" : {
            "type" : "number",
            "format" : "double"
          },
          "intVal" : {
            "type" : "integer",
            "format" : "int32"
          },
          "bigIntVal" : {
            "type" : "integer"
          }
        }
      },
      "PropertyFieldValueType" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "PropertyKey" : {
        "required" : [ "country", "propertyLocation", "propertyProposal", "propertyType" ],
        "type" : "object",
        "properties" : {
          "propertyType" : {
            "$ref" : "#/components/schemas/PropertyType"
          },
          "propertyLocation" : {
            "$ref" : "#/components/schemas/PropertyLocation"
          },
          "propertyProposal" : {
            "$ref" : "#/components/schemas/PropertyProposal"
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "PropertyLocation" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "lang" : {
            "type" : "string"
          }
        }
      },
      "PropertyProposal" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "lang" : {
            "type" : "string"
          }
        }
      },
      "PropertyType" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier for the property type",
            "format" : "int32",
            "example" : 1
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the property type",
            "example" : "House"
          },
          "lang" : {
            "type" : "string",
            "description" : "Language key for internationalization",
            "example" : "hallocasa.propertytype.house"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Whether the property type is active",
            "example" : true
          },
          "group" : {
            "$ref" : "#/components/schemas/PropertyTypeGroup"
          }
        },
        "description" : "Property type information"
      },
      "PropertyTypeGroup" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier for the property type group",
            "format" : "int32",
            "example" : 1
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the property type group",
            "example" : "Lots"
          }
        },
        "description" : "Group for categorizing property types"
      },
      "CurrencyAmmount" : {
        "type" : "object",
        "properties" : {
          "currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "ammount" : {
            "type" : "number"
          },
          "valid" : {
            "type" : "boolean"
          }
        }
      },
      "FilterShowingStep" : {
        "type" : "object",
        "properties" : {
          "sequenceBefore" : {
            "type" : "string",
            "enum" : [ "INIT_GROUP", "END_GROUP", "AND", "OR" ]
          },
          "filterCondition" : {
            "$ref" : "#/components/schemas/HcFilterCondition"
          },
          "sequenceAfter" : {
            "type" : "string",
            "enum" : [ "INIT_GROUP", "END_GROUP", "AND", "OR" ]
          }
        }
      },
      "HcFilter" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "lang" : {
            "type" : "string"
          },
          "filterType" : {
            "$ref" : "#/components/schemas/HcFilterType"
          },
          "filterNature" : {
            "$ref" : "#/components/schemas/HcFilterNature"
          },
          "showingStepList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FilterShowingStep"
            }
          },
          "parentFilter" : {
            "$ref" : "#/components/schemas/HcFilter"
          },
          "choice" : {
            "type" : "string",
            "enum" : [ "SHOW", "HIDE" ]
          },
          "usePropertyField" : {
            "type" : "boolean"
          },
          "filterWorkerOption" : {
            "type" : "string",
            "enum" : [ "PROPERTY_LOCATION_KEY", "COUNTRY_KEY", "PROPERTY_PROPOSAL_KEY", "RANGE", "DROPDOWN", "BOOLEAN", "CURRENCY_RANGE", "ROI", "FREE_TEXT", "ID", "PUBLICATION_STATE", "PUBLICATION_DATE", "GEOLOCATION_AREA", "GROUPS", "USER_ID", "XML_ID" ]
          },
          "hcListerOption" : {
            "type" : "string",
            "enum" : [ "PROPERTY_TYPE" ]
          },
          "useStaticFilterOptions" : {
            "type" : "boolean"
          },
          "forceAllFilterOptions" : {
            "type" : "boolean"
          }
        }
      },
      "HcFilterCondition" : {
        "type" : "object",
        "properties" : {
          "filterId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "searchSpecific" : {
            "type" : "boolean"
          },
          "containsAtLeastOne" : {
            "type" : "boolean"
          },
          "containsAll" : {
            "type" : "boolean"
          },
          "containsNumber" : {
            "type" : "boolean"
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "selectedNumberAny" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minOperand" : {
            "type" : "string",
            "enum" : [ "GT", "GET", "EQ", "LT", "LET" ]
          },
          "maxOperand" : {
            "type" : "string",
            "enum" : [ "GT", "GET", "EQ", "LT", "LET" ]
          },
          "minValue" : {
            "type" : "number",
            "format" : "double"
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double"
          },
          "applyMinConstraint" : {
            "type" : "boolean"
          },
          "applyMaxConstraint" : {
            "type" : "boolean"
          },
          "apply" : {
            "type" : "boolean"
          }
        }
      },
      "HcFilterEntry" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "lang" : {
            "type" : "string"
          },
          "filterType" : {
            "$ref" : "#/components/schemas/HcFilterTypeEntry"
          },
          "filterNature" : {
            "$ref" : "#/components/schemas/HcFilterNature"
          },
          "showingStepList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FilterShowingStep"
            }
          },
          "parentFilter" : {
            "$ref" : "#/components/schemas/HcFilter"
          },
          "choice" : {
            "type" : "string",
            "enum" : [ "SHOW", "HIDE" ]
          },
          "usePropertyField" : {
            "type" : "boolean"
          },
          "filterWorkerOption" : {
            "type" : "string",
            "enum" : [ "PROPERTY_LOCATION_KEY", "COUNTRY_KEY", "PROPERTY_PROPOSAL_KEY", "RANGE", "DROPDOWN", "BOOLEAN", "CURRENCY_RANGE", "ROI", "FREE_TEXT", "ID", "PUBLICATION_STATE", "PUBLICATION_DATE", "GEOLOCATION_AREA", "GROUPS", "USER_ID", "XML_ID" ]
          },
          "minValue" : {
            "type" : "number",
            "format" : "double"
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double"
          },
          "minValueDateInPast" : {
            "type" : "boolean"
          },
          "minValueDateInFuture" : {
            "type" : "boolean"
          },
          "maxValueDateInPast" : {
            "type" : "boolean"
          },
          "maxValueDateInFuture" : {
            "type" : "boolean"
          },
          "useStaticFilterOptions" : {
            "type" : "boolean"
          },
          "forceAllFilterOptions" : {
            "type" : "boolean"
          },
          "dropdownOptionGroup" : {
            "$ref" : "#/components/schemas/DropdownOptionGroup"
          },
          "yesText" : {
            "type" : "string"
          },
          "noText" : {
            "type" : "string"
          }
        }
      },
      "HcFilterNature" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "HcFilterType" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "filterTypeNature" : {
            "type" : "string",
            "enum" : [ "DROPDOWN", "YESNO", "RANGE", "TEXT", "AREA_RANGE" ]
          },
          "useSlider" : {
            "type" : "boolean"
          },
          "validateMin" : {
            "type" : "boolean"
          },
          "validateMax" : {
            "type" : "boolean"
          },
          "allowMultiple" : {
            "type" : "boolean"
          },
          "useSearch" : {
            "type" : "boolean"
          },
          "useSort" : {
            "type" : "boolean"
          },
          "useSelectAll" : {
            "type" : "boolean"
          },
          "useRemoteList" : {
            "type" : "boolean"
          },
          "useLinks" : {
            "type" : "boolean"
          },
          "useYesNoDropdown" : {
            "type" : "boolean"
          },
          "useCheckbox" : {
            "type" : "boolean"
          },
          "useRadio" : {
            "type" : "boolean"
          },
          "useText" : {
            "type" : "boolean"
          },
          "toggle" : {
            "type" : "boolean"
          },
          "sortSign" : {
            "type" : "boolean"
          },
          "rangeOnlyFrom" : {
            "type" : "boolean"
          },
          "rangeOnlyTo" : {
            "type" : "boolean"
          },
          "rangeFieldPresentation" : {
            "type" : "string",
            "enum" : [ "INTEGER", "DOUBLE", "CURRENCY", "DATE" ]
          }
        }
      },
      "HcFilterTypeEntry" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "name" : {
            "type" : "string"
          },
          "filterTypeNature" : {
            "type" : "string",
            "enum" : [ "DROPDOWN", "YESNO", "RANGE", "TEXT", "AREA_RANGE" ]
          },
          "useSlider" : {
            "type" : "boolean"
          },
          "onlyFrom" : {
            "type" : "boolean"
          },
          "onlyTo" : {
            "type" : "boolean"
          },
          "validateMin" : {
            "type" : "boolean"
          },
          "validateMax" : {
            "type" : "boolean"
          },
          "rangeFieldPresentation" : {
            "type" : "string",
            "enum" : [ "INTEGER", "DOUBLE", "CURRENCY", "DATE" ]
          },
          "allowMultiple" : {
            "type" : "boolean"
          },
          "useSearch" : {
            "type" : "boolean"
          },
          "useSort" : {
            "type" : "boolean"
          },
          "useSelectAll" : {
            "type" : "boolean"
          },
          "useRemoteList" : {
            "type" : "boolean"
          },
          "useLinks" : {
            "type" : "boolean"
          },
          "useYesNoDropdown" : {
            "type" : "boolean"
          },
          "useCheckbox" : {
            "type" : "boolean"
          },
          "useRadio" : {
            "type" : "boolean"
          },
          "useText" : {
            "type" : "boolean"
          },
          "toggle" : {
            "type" : "boolean"
          },
          "sortSign" : {
            "type" : "boolean"
          }
        }
      },
      "PropertyFilterCriteria" : {
        "type" : "object",
        "properties" : {
          "filterList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PropertyFilterSubmission"
            }
          },
          "resultRequest" : {
            "$ref" : "#/components/schemas/ResultRequest"
          }
        }
      },
      "PropertyFilterEntry" : {
        "required" : [ "filter" ],
        "type" : "object",
        "properties" : {
          "filter" : {
            "$ref" : "#/components/schemas/HcFilterEntry"
          },
          "propertyField" : {
            "$ref" : "#/components/schemas/PropertyField"
          }
        }
      },
      "PropertyFilterSubmission" : {
        "required" : [ "propertyFilter" ],
        "type" : "object",
        "properties" : {
          "apply" : {
            "type" : "boolean"
          },
          "propertyFilter" : {
            "$ref" : "#/components/schemas/PropertyFilterEntry"
          },
          "minValue" : {
            "type" : "number",
            "format" : "double"
          },
          "maxValue" : {
            "type" : "number",
            "format" : "double"
          },
          "minDateValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "maxDateValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "minCrcyValue" : {
            "$ref" : "#/components/schemas/CurrencyAmmount"
          },
          "maxCrcyValue" : {
            "$ref" : "#/components/schemas/CurrencyAmmount"
          },
          "minLocalDateTimeValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "maxLocalDateTimeValue" : {
            "type" : "string",
            "format" : "date-time"
          },
          "latitudeValue" : {
            "type" : "number",
            "format" : "double"
          },
          "longitudeValue" : {
            "type" : "number",
            "format" : "double"
          },
          "radiusValue" : {
            "type" : "integer",
            "format" : "int32"
          },
          "userId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "xmlId" : {
            "type" : "string"
          },
          "freeText" : {
            "type" : "string"
          },
          "selectedFilterOptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DropdownOption"
            }
          }
        }
      },
      "ResultRequest" : {
        "type" : "object",
        "properties" : {
          "pageFrom" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageTo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "orderByMostRecent" : {
            "type" : "boolean"
          },
          "orderByLessRecent" : {
            "type" : "boolean"
          },
          "asc" : {
            "type" : "boolean"
          },
          "loadCount" : {
            "type" : "boolean"
          },
          "orderBy" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "PropertyFilter" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "$ref" : "#/components/schemas/HcFilter"
          },
          "propertyField" : {
            "$ref" : "#/components/schemas/PropertyField"
          }
        }
      },
      "WeeklyAlertRange" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "string",
            "format" : "date-time"
          },
          "to" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "Testimonial" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "property" : {
            "$ref" : "#/components/schemas/Property"
          },
          "publishDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "publisher" : {
            "$ref" : "#/components/schemas/User"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "testimonial" : {
            "type" : "string"
          },
          "published" : {
            "type" : "boolean"
          }
        }
      },
      "TestimonialFilterResult" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int64"
          },
          "testimonialList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Testimonial"
            }
          }
        }
      },
      "PropertyFilterResult" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int64"
          },
          "propertyList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Property"
            }
          }
        }
      },
      "TestimonialRequest" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "requester" : {
            "$ref" : "#/components/schemas/User"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "requestCompleted" : {
            "type" : "boolean"
          }
        }
      },
      "LogEntry" : {
        "type" : "object",
        "properties" : {
          "module" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "PasswordRecoveryRequest" : {
        "required" : [ "newPassword", "passwordRecoveryToken" ],
        "type" : "object",
        "properties" : {
          "newPassword" : {
            "type" : "string",
            "description" : "New password to set for the user",
            "example" : "newSecurePassword123"
          },
          "passwordRecoveryToken" : {
            "$ref" : "#/components/schemas/PasswordRecoveryToken"
          }
        },
        "description" : "Request object for password recovery operations"
      },
      "PasswordRecoveryToken" : {
        "required" : [ "tokenContent" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "description" : "Unique identifier for the token",
            "format" : "int32",
            "example" : 123
          },
          "idAssociated" : {
            "type" : "integer",
            "description" : "ID of the associated user",
            "format" : "int32",
            "example" : 456
          },
          "tokenContent" : {
            "type" : "string",
            "description" : "Token content that is sent in the recovery email",
            "example" : "abc123xyz789"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "Expiration date of the token",
            "format" : "date-time",
            "example" : "2023-12-31T23:59:59Z"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Whether the token is active or already used",
            "example" : true
          },
          "expeditionDate" : {
            "type" : "string",
            "description" : "Date when the token was created",
            "format" : "date-time",
            "example" : "2023-12-30T14:30:00Z"
          }
        },
        "description" : "Token used for password recovery process"
      },
      "AuthInfoDto" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "$ref" : "#/components/schemas/UserDto"
          },
          "securityToken" : {
            "$ref" : "#/components/schemas/SecurityToken"
          }
        }
      },
      "SecurityToken" : {
        "type" : "object",
        "properties" : {
          "tokenValue" : {
            "type" : "string"
          },
          "registered" : {
            "type" : "string",
            "format" : "date-time"
          },
          "expiresIn" : {
            "type" : "integer",
            "format" : "int64"
          },
          "expired" : {
            "type" : "boolean"
          }
        }
      },
      "UserDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "email" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "confirmedFlag" : {
            "type" : "boolean"
          },
          "subscriptions" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "userPermissions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserPermission"
            }
          }
        }
      },
      "UserPermission" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "CheckoutSessionDto" : {
        "required" : [ "price", "subscriptionPlan", "user" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "subscriptionPlan" : {
            "$ref" : "#/components/schemas/SubscriptionPlanDto"
          },
          "price" : {
            "$ref" : "#/components/schemas/SubscriptionPriceDto"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "IN_PROCESS", "SUCCESS", "CANCELED", "FAILED" ]
          },
          "affiliateRefNumber" : {
            "type" : "string"
          },
          "user" : {
            "$ref" : "#/components/schemas/SubscribedUserDto"
          },
          "successUrl" : {
            "type" : "string"
          },
          "cancelUrl" : {
            "type" : "string"
          }
        }
      },
      "FeatureDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "lang" : {
            "type" : "string"
          },
          "descriptionLang" : {
            "type" : "string"
          }
        }
      },
      "SubscribedUserDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "email" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          }
        }
      },
      "SubscriptionPlanDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "lang" : {
            "type" : "string"
          },
          "features" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionPlanFeatureDto"
            }
          },
          "prices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubscriptionPriceDto"
            }
          }
        }
      },
      "SubscriptionPlanFeatureDto" : {
        "type" : "object",
        "properties" : {
          "feature" : {
            "$ref" : "#/components/schemas/FeatureDto"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "SubscriptionPriceDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "price" : {
            "type" : "number",
            "format" : "double"
          },
          "currency" : {
            "type" : "string"
          },
          "renewalType" : {
            "type" : "string",
            "enum" : [ "DAILY", "WEEKLY", "MONTHLY", "EVERY_3_MONTHS", "EVERY_6_MONTHS", "YEARLY" ]
          }
        }
      },
      "CustomerSessionDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "user" : {
            "$ref" : "#/components/schemas/SubscribedUserDto"
          },
          "url" : {
            "type" : "string"
          },
          "returnUrl" : {
            "type" : "string"
          }
        }
      },
      "StripeEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "data" : {
            "$ref" : "#/components/schemas/StripeEventData"
          }
        }
      },
      "StripeEventData" : {
        "type" : "object",
        "properties" : {
          "object" : {
            "type" : "object",
            "description" : "Stripe event object data in JSON format",
            "example" : {
              "id" : "sub_123",
              "customer" : "cus_456",
              "status" : "active"
            }
          },
          "previous_attributes" : {
            "type" : "object",
            "description" : "Previous attributes of the object before the event",
            "example" : {
              "status" : "trialing"
            }
          }
        }
      },
      "UserSubscriptionDto" : {
        "type" : "object",
        "properties" : {
          "subscriptionPlan" : {
            "$ref" : "#/components/schemas/SubscriptionPlanDto"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "renewalType" : {
            "type" : "string",
            "enum" : [ "DAILY", "WEEKLY", "MONTHLY", "EVERY_3_MONTHS", "EVERY_6_MONTHS", "YEARLY" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "INACTIVE" ]
          }
        }
      },
      "Alert" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userAlertType" : {
            "type" : "string",
            "enum" : [ "PROPERTY" ]
          },
          "alertCriteria" : {
            "type" : "object",
            "description" : "Alert criteria in JSON format",
            "example" : {
              "priceMin" : 100000,
              "priceMax" : 300000,
              "location" : "Miami"
            }
          },
          "allowBrokerContact" : {
            "type" : "boolean"
          },
          "lastNotification" : {
            "type" : "string",
            "format" : "date-time"
          },
          "result" : {
            "type" : "object",
            "description" : "Alert result data in JSON format",
            "example" : {
              "matchCount" : 5,
              "properties" : [ ]
            }
          },
          "newsletterOwnerId" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "Brokerage" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "boolean"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deletedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "NewsletterSubscriberDto" : {
        "type" : "object",
        "properties" : {
          "alert" : {
            "$ref" : "#/components/schemas/Alert"
          },
          "user" : {
            "$ref" : "#/components/schemas/SkilledUser"
          }
        },
        "description" : "Newsletter subscriber information"
      },
      "Skill" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "label" : {
            "type" : "string"
          },
          "locale" : {
            "type" : "string"
          }
        }
      },
      "SkilledUser" : {
        "type" : "object",
        "properties" : {
          "language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "email" : {
            "maxLength" : 160,
            "minLength" : 0,
            "type" : "string"
          },
          "firstName" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "lastName" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "password" : {
            "type" : "string"
          },
          "confirmedFlag" : {
            "type" : "boolean"
          },
          "registerDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "webSite" : {
            "maxLength" : 80,
            "minLength" : 0,
            "type" : "string"
          },
          "linkedIn" : {
            "maxLength" : 160,
            "minLength" : 0,
            "type" : "string"
          },
          "skype" : {
            "maxLength" : 45,
            "minLength" : 0,
            "type" : "string"
          },
          "base64Image" : {
            "type" : "string"
          },
          "imageLink" : {
            "type" : "string"
          },
          "mainSpokenLanguage" : {
            "$ref" : "#/components/schemas/Language"
          },
          "telephonePrefix" : {
            "$ref" : "#/components/schemas/CountryTelephonePrefix"
          },
          "telephoneNumber" : {
            "type" : "string"
          },
          "userTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserType"
            }
          },
          "userLanguages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserLanguage"
            }
          },
          "userDescriptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserDescription"
            }
          },
          "country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "role" : {
            "type" : "string"
          },
          "backgroundImageBase64" : {
            "type" : "string"
          },
          "backgroundImageLink" : {
            "type" : "string"
          },
          "profileName" : {
            "type" : "string"
          },
          "lastActivity" : {
            "type" : "string",
            "format" : "date-time"
          },
          "chatStatus" : {
            "type" : "string"
          },
          "chatsCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "phoneVerified" : {
            "type" : "boolean"
          },
          "geoPlace" : {
            "$ref" : "#/components/schemas/GeoPlace"
          },
          "chamberOfCommerceUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "facebookUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "instagramUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "twitterUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "wechatUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "vkUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "videoUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "bookAnAppointmentUrl" : {
            "pattern" : "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&\\/\\/=]*)",
            "type" : "string"
          },
          "googlePlaceId" : {
            "type" : "string"
          },
          "googlePlaceReviews" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GooglePlaceReview"
            }
          },
          "achievementsYearsOfExperience" : {
            "type" : "integer",
            "format" : "int32"
          },
          "achievementsDealsClosed" : {
            "type" : "integer",
            "format" : "int32"
          },
          "achievementsPercentageOfAllAgents" : {
            "type" : "number",
            "format" : "double"
          },
          "achievementsGooglePlaceId" : {
            "type" : "string"
          },
          "focusOnCommercial" : {
            "type" : "boolean"
          },
          "focusOnResidential" : {
            "type" : "boolean"
          },
          "focusOnRental" : {
            "type" : "boolean"
          },
          "focusOnSelling" : {
            "type" : "boolean"
          },
          "imprintTitle" : {
            "type" : "string"
          },
          "imprintDescription" : {
            "type" : "string"
          },
          "imprintBase64Image" : {
            "type" : "string"
          },
          "imprintLogoLink" : {
            "type" : "string"
          },
          "showEmailInProfile" : {
            "type" : "boolean"
          },
          "showEmailInProperty" : {
            "type" : "boolean"
          },
          "showPhoneInProperty" : {
            "type" : "boolean"
          },
          "isAllowSaveContact" : {
            "type" : "boolean"
          },
          "city" : {
            "type" : "string"
          },
          "referral" : {
            "type" : "string"
          },
          "skills" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserSkill"
            }
          },
          "subscriptionPlanName" : {
            "type" : "string"
          },
          "brokerage" : {
            "$ref" : "#/components/schemas/Brokerage"
          },
          "groupMemberStatus" : {
            "type" : "string"
          },
          "imprintImageLink" : {
            "type" : "string",
            "writeOnly" : true
          }
        }
      },
      "UserSkill" : {
        "required" : [ "skill" ],
        "type" : "object",
        "properties" : {
          "skill" : {
            "$ref" : "#/components/schemas/Skill"
          },
          "endorsementsCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "SkillEndorsement" : {
        "required" : [ "endorser", "skill", "user" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "user" : {
            "$ref" : "#/components/schemas/SkilledUser"
          },
          "endorser" : {
            "$ref" : "#/components/schemas/SkilledUser"
          },
          "skill" : {
            "$ref" : "#/components/schemas/Skill"
          },
          "dateTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "Favorite" : {
        "required" : [ "resourceId", "resourceType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "resourceType" : {
            "type" : "string",
            "enum" : [ "PROPERTY" ]
          },
          "resourceId" : {
            "type" : "string"
          },
          "resource" : {
            "type" : "object",
            "description" : "Resource data in JSON format",
            "example" : {
              "id" : "123",
              "title" : "Beautiful Beach House",
              "price" : 250000
            }
          }
        }
      },
      "UserFilterResult" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int64"
          },
          "userList" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SkilledUser"
            }
          }
        }
      },
      "UserFilterRequest" : {
        "required" : [ "resultRequest" ],
        "type" : "object",
        "properties" : {
          "resultRequest" : {
            "$ref" : "#/components/schemas/UserFilterResultSpec"
          },
          "name" : {
            "type" : "string",
            "description" : "Filter by user name (partial match supported)",
            "example" : "John Doe"
          },
          "countries" : {
            "type" : "array",
            "description" : "Filter by countries where users operate",
            "example" : [ "US", "CA" ],
            "items" : {
              "$ref" : "#/components/schemas/Country"
            }
          },
          "latitude" : {
            "type" : "number",
            "description" : "Latitude for location-based search (must be used with longitude and radius)",
            "format" : "double",
            "example" : 40.7128
          },
          "longitude" : {
            "type" : "number",
            "description" : "Longitude for location-based search (must be used with latitude and radius)",
            "format" : "double",
            "example" : -74.006
          },
          "radius" : {
            "type" : "integer",
            "description" : "Search radius in kilometers for location-based search (must be used with latitude and longitude)",
            "format" : "int32",
            "example" : 50
          },
          "userTypes" : {
            "type" : "array",
            "description" : "Filter by user types",
            "example" : [ "BROKER", "AGENT" ],
            "items" : {
              "$ref" : "#/components/schemas/UserType"
            }
          },
          "languages" : {
            "type" : "array",
            "description" : "Filter by languages spoken by users",
            "example" : [ "EN", "ES" ],
            "items" : {
              "$ref" : "#/components/schemas/Language"
            }
          },
          "filterWhatsApp" : {
            "type" : "boolean",
            "description" : "Filter only users with WhatsApp",
            "example" : true
          },
          "filterTelephoneNumber" : {
            "type" : "boolean",
            "description" : "Filter only users with telephone number",
            "example" : true
          },
          "filterGooglePlaceId" : {
            "type" : "boolean",
            "description" : "Filter only users with Google Place ID",
            "example" : false
          },
          "filterFocusOnCommercial" : {
            "type" : "boolean",
            "description" : "Filter users focused on commercial properties",
            "example" : true
          },
          "filterFocusOnResidential" : {
            "type" : "boolean",
            "description" : "Filter users focused on residential properties",
            "example" : false
          },
          "filterFocusOnRental" : {
            "type" : "boolean",
            "description" : "Filter users focused on rental properties",
            "example" : true
          },
          "filterFocusOnSelling" : {
            "type" : "boolean",
            "description" : "Filter users focused on selling properties",
            "example" : false
          },
          "filterSocial" : {
            "type" : "boolean",
            "description" : "Filter users with social media presence",
            "example" : true
          },
          "brokerages" : {
            "type" : "array",
            "description" : "Filter by brokerage IDs",
            "example" : [ 123, 456 ],
            "items" : {
              "type" : "integer",
              "description" : "Filter by brokerage IDs",
              "format" : "int64"
            }
          },
          "userIds" : {
            "type" : "array",
            "description" : "Filter by specific user IDs",
            "example" : [ 789, 1011 ],
            "items" : {
              "type" : "integer",
              "description" : "Filter by specific user IDs",
              "format" : "int64"
            }
          }
        },
        "description" : "Filter request for searching users with various criteria including location, user types, languages, and business focus areas"
      },
      "UserFilterResultSpec" : {
        "type" : "object",
        "properties" : {
          "pageFrom" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageTo" : {
            "type" : "integer",
            "format" : "int32"
          },
          "orderByMostRecent" : {
            "type" : "boolean"
          },
          "orderByLessRecent" : {
            "type" : "boolean"
          },
          "asc" : {
            "type" : "boolean"
          },
          "loadCount" : {
            "type" : "boolean"
          },
          "orderBy" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "orderByMostRecentLogin" : {
            "type" : "boolean",
            "description" : "Sort users by most recent login first",
            "example" : true
          },
          "orderByLessRecentLogin" : {
            "type" : "boolean",
            "description" : "Sort users by least recent login first",
            "example" : false
          }
        },
        "description" : "Result specification for pagination and sorting of user search results"
      },
      "PhoneCodeCheckResource" : {
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "maxLength" : 6,
            "minLength" : 2,
            "type" : "string"
          }
        }
      },
      "UserListRequest" : {
        "type" : "object",
        "properties" : {
          "userNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "excludeIdList" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "SubscribedUser" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "email" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "paymentAppId" : {
            "type" : "string"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "PhoneCodeRequestResource" : {
        "required" : [ "verificationType" ],
        "type" : "object",
        "properties" : {
          "verificationType" : {
            "pattern" : "^(sms|call)$",
            "type" : "string"
          }
        }
      }
    },
    "securitySchemes" : {
      "oAuthCode" : {
        "type" : "apiKey",
        "description" : "OAuth authorization code (default: mFQDZKXBtVkoUofIOsmhuyxnyvOcmMPT)",
        "name" : "O-Auth-Code",
        "in" : "header"
      },
      "oAuthClientId" : {
        "type" : "apiKey",
        "description" : "OAuth client identifier (default: hallocasa_frontend)",
        "name" : "O-Auth-Client-Id",
        "in" : "header"
      }
    }
  }
}